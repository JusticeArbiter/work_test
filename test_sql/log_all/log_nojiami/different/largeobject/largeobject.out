--
-- Test large object support
--
-- ensure consistent test output regardless of the default bytea format
SET bytea_output TO escape;
SET
-- Load a file
CREATE TABLE lotest_stash_values (loid oid, fd integer);
CREATE TABLE
-- lo_creat(mode integer) returns oid
-- The mode arg to lo_creat is unused, some vestigal holdover from ancient times
-- returns the large object id
INSERT INTO lotest_stash_values (loid) SELECT lo_creat(42);
INSERT 0 1
-- Test ALTER LARGE OBJECT
CREATE ROLE regresslo;
CREATE ROLE
DO $$
  BEGIN
    EXECUTE 'ALTER LARGE OBJECT ' || (select loid from lotest_stash_values)
		|| ' OWNER TO regresslo';
  END
$$;
DO
SELECT
	rol.rolname
FROM
	lotest_stash_values s
	JOIN pg_largeobject_metadata lo ON s.loid = lo.oid
	JOIN pg_authid rol ON lo.lomowner = rol.oid;
  rolname  
-----------
 regresslo
(1 row)

-- NOTE: large objects require transactions
BEGIN;
BEGIN
-- lo_open(lobjId oid, mode integer) returns integer
-- The mode parameter to lo_open uses two constants:
--   INV_READ  = 0x20000
--   INV_WRITE = 0x40000
-- The return value is a file descriptor-like value which remains valid for the
-- transaction.
UPDATE lotest_stash_values SET fd = lo_open(loid, CAST(x'20000' | x'40000' AS integer));
UPDATE 1
-- loread/lowrite names are wonky, different from other functions which are lo_*
-- lowrite(fd integer, data bytea) returns integer
-- the integer is the number of bytes written
SELECT lowrite(fd, '
I wandered lonely as a cloud
That floats on high o''er vales and hills,
When all at once I saw a crowd,
A host, of golden daffodils;
Beside the lake, beneath the trees,
Fluttering and dancing in the breeze.

Continuous as the stars that shine
And twinkle on the milky way,
They stretched in never-ending line
Along the margin of a bay:
Ten thousand saw I at a glance,
Tossing their heads in sprightly dance.

The waves beside them danced; but they
Out-did the sparkling waves in glee:
A poet could not but be gay,
In such a jocund company:
I gazed--and gazed--but little thought
What wealth the show to me had brought:

For oft, when on my couch I lie
In vacant or in pensive mood,
They flash upon that inward eye
Which is the bliss of solitude;
And then my heart with pleasure fills,
And dances with the daffodils.

         -- William Wordsworth
') FROM lotest_stash_values;
 lowrite 
---------
     848
(1 row)

-- lo_close(fd integer) returns integer
-- return value is 0 for success, or <0 for error (actually only -1, but...)
SELECT lo_close(fd) FROM lotest_stash_values;
 lo_close 
----------
        0
(1 row)

END;
COMMIT
-- Copy to another large object.
-- Note: we intentionally don't remove the object created here;
-- it's left behind to help test pg_dump.
SELECT lo_from_bytea(0, lo_get(loid)) AS newloid FROM lotest_stash_values
\gset
-- Add a comment to it, as well, for pg_dump/pg_upgrade testing.
COMMENT ON LARGE OBJECT :newloid IS 'I Wandered Lonely as a Cloud';
COMMENT
-- Read out a portion
BEGIN;
BEGIN
UPDATE lotest_stash_values SET fd=lo_open(loid, CAST(x'20000' | x'40000' AS integer));
UPDATE 1
-- lo_lseek(fd integer, offset integer, whence integer) returns integer
-- offset is in bytes, whence is one of three values:
--  SEEK_SET (= 0) meaning relative to beginning
--  SEEK_CUR (= 1) meaning relative to current position
--  SEEK_END (= 2) meaning relative to end (offset better be negative)
-- returns current position in file
SELECT lo_lseek(fd, 104, 0) FROM lotest_stash_values;
 lo_lseek 
----------
      104
(1 row)

-- loread/lowrite names are wonky, different from other functions which are lo_*
-- loread(fd integer, len integer) returns bytea
SELECT loread(fd, 28) FROM lotest_stash_values;
            loread            
------------------------------
 A host, of golden daffodils;
(1 row)

SELECT lo_lseek(fd, -19, 1) FROM lotest_stash_values;
 lo_lseek 
----------
      113
(1 row)

SELECT lowrite(fd, 'n') FROM lotest_stash_values;
 lowrite 
---------
       1
(1 row)

SELECT lo_tell(fd) FROM lotest_stash_values;
 lo_tell 
---------
     114
(1 row)

SELECT lo_lseek(fd, -744, 2) FROM lotest_stash_values;
 lo_lseek 
----------
      104
(1 row)

SELECT loread(fd, 28) FROM lotest_stash_values;
            loread            
------------------------------
 A host, on golden daffodils;
(1 row)

SELECT lo_close(fd) FROM lotest_stash_values;
 lo_close 
----------
        0
(1 row)

END;
COMMIT
-- Test resource management
BEGIN;
BEGIN
SELECT lo_open(loid, x'40000'::int) from lotest_stash_values;
 lo_open 
---------
       0
(1 row)

ABORT;
ROLLBACK
-- Test truncation.
BEGIN;
BEGIN
UPDATE lotest_stash_values SET fd=lo_open(loid, CAST(x'20000' | x'40000' AS integer));
UPDATE 1
SELECT lo_truncate(fd, 11) FROM lotest_stash_values;
 lo_truncate 
-------------
           0
(1 row)

SELECT loread(fd, 15) FROM lotest_stash_values;
     loread     
----------------
 \012I wandered
(1 row)

SELECT lo_truncate(fd, 10000) FROM lotest_stash_values;
 lo_truncate 
-------------
           0
(1 row)

SELECT loread(fd, 10) FROM lotest_stash_values;
                  loread                  
------------------------------------------
 \000\000\000\000\000\000\000\000\000\000
(1 row)

SELECT lo_lseek(fd, 0, 2) FROM lotest_stash_values;
 lo_lseek 
----------
    10000
(1 row)

SELECT lo_tell(fd) FROM lotest_stash_values;
 lo_tell 
---------
   10000
(1 row)

SELECT lo_truncate(fd, 5000) FROM lotest_stash_values;
 lo_truncate 
-------------
           0
(1 row)

SELECT lo_lseek(fd, 0, 2) FROM lotest_stash_values;
 lo_lseek 
----------
     5000
(1 row)

SELECT lo_tell(fd) FROM lotest_stash_values;
 lo_tell 
---------
    5000
(1 row)

SELECT lo_close(fd) FROM lotest_stash_values;
 lo_close 
----------
        0
(1 row)

END;
COMMIT
-- Test 64-bit large object functions.
BEGIN;
BEGIN
UPDATE lotest_stash_values SET fd = lo_open(loid, CAST(x'20000' | x'40000' AS integer));
UPDATE 1
SELECT lo_lseek64(fd, 4294967296, 0) FROM lotest_stash_values;
 lo_lseek64 
------------
 4294967296
(1 row)

SELECT lowrite(fd, 'offset:4GB') FROM lotest_stash_values;
 lowrite 
---------
      10
(1 row)

SELECT lo_tell64(fd) FROM lotest_stash_values;
 lo_tell64  
------------
 4294967306
(1 row)

SELECT lo_lseek64(fd, -10, 1) FROM lotest_stash_values;
 lo_lseek64 
------------
 4294967296
(1 row)

SELECT lo_tell64(fd) FROM lotest_stash_values;
 lo_tell64  
------------
 4294967296
(1 row)

SELECT loread(fd, 10) FROM lotest_stash_values;
   loread   
------------
 offset:4GB
(1 row)

SELECT lo_truncate64(fd, 5000000000) FROM lotest_stash_values;
 lo_truncate64 
---------------
             0
(1 row)

SELECT lo_lseek64(fd, 0, 2) FROM lotest_stash_values;
 lo_lseek64 
------------
 5000000000
(1 row)

SELECT lo_tell64(fd) FROM lotest_stash_values;
 lo_tell64  
------------
 5000000000
(1 row)

SELECT lo_truncate64(fd, 3000000000) FROM lotest_stash_values;
 lo_truncate64 
---------------
             0
(1 row)

SELECT lo_lseek64(fd, 0, 2) FROM lotest_stash_values;
 lo_lseek64 
------------
 3000000000
(1 row)

SELECT lo_tell64(fd) FROM lotest_stash_values;
 lo_tell64  
------------
 3000000000
(1 row)

SELECT lo_close(fd) FROM lotest_stash_values;
 lo_close 
----------
        0
(1 row)

END;
COMMIT
-- lo_unlink(lobjId oid) returns integer
-- return value appears to always be 1
SELECT lo_unlink(loid) from lotest_stash_values;
 lo_unlink 
-----------
         1
(1 row)

TRUNCATE lotest_stash_values;
TRUNCATE TABLE
INSERT INTO lotest_stash_values (loid) SELECT lo_import('/home/postgres/postgresql-9.5.10/src/test/regress/data/tenk.data');
ERROR:  42501: could not open server file "/home/postgres/postgresql-9.5.10/src/test/regress/data/tenk.data": Permission denied
BEGIN;
BEGIN
UPDATE lotest_stash_values SET fd=lo_open(loid, CAST(x'20000' | x'40000' AS integer));
UPDATE 0
-- verify length of large object
SELECT lo_lseek(fd, 0, 2) FROM lotest_stash_values;
 lo_lseek 
----------
(0 rows)

-- with the default BLKSZ, LOBLKSZ = 2048, so this positions us for a block
-- edge case
SELECT lo_lseek(fd, 2030, 0) FROM lotest_stash_values;
 lo_lseek 
----------
(0 rows)

-- this should get half of the value from page 0 and half from page 1 of the
-- large object
SELECT loread(fd, 36) FROM lotest_stash_values;
 loread 
--------
(0 rows)

SELECT lo_tell(fd) FROM lotest_stash_values;
 lo_tell 
---------
(0 rows)

SELECT lo_lseek(fd, -26, 1) FROM lotest_stash_values;
 lo_lseek 
----------
(0 rows)

SELECT lowrite(fd, 'abcdefghijklmnop') FROM lotest_stash_values;
 lowrite 
---------
(0 rows)

SELECT lo_lseek(fd, 2030, 0) FROM lotest_stash_values;
 lo_lseek 
----------
(0 rows)

SELECT loread(fd, 36) FROM lotest_stash_values;
 loread 
--------
(0 rows)

SELECT lo_close(fd) FROM lotest_stash_values;
 lo_close 
----------
(0 rows)

END;
COMMIT
SELECT lo_export(loid, '/home/postgres/postgresql-9.5.10/src/test/regress/results/lotest.txt') FROM lotest_stash_values;
 lo_export 
-----------
(0 rows)

\lo_import 'results/lotest.txt'
psql:/home/highgo/test_sql/sql/largeobject.sql:206: could not open file "results/lotest.txt": No such file or directory
\set newloid :LASTOID
-- just make sure \lo_export does not barf
\lo_export :newloid 'results/lotest2.txt'
ERROR:  42704: large object 0 does not exist
-- This is a hack to test that export/import are reversible
-- This uses knowledge about the inner workings of large object mechanism
-- which should not be used outside it.  This makes it a HACK
SELECT pageno, data FROM pg_largeobject WHERE loid = (SELECT loid from lotest_stash_values)
EXCEPT
SELECT pageno, data FROM pg_largeobject WHERE loid = :newloid;
 pageno | data 
--------+------
(0 rows)

SELECT lo_unlink(loid) FROM lotest_stash_values;
 lo_unlink 
-----------
(0 rows)

TRUNCATE lotest_stash_values;
TRUNCATE TABLE
\lo_unlink :newloid
ERROR:  42704: large object 0 does not exist
\lo_import 'results/lotest.txt'
psql:/home/highgo/test_sql/sql/largeobject.sql:226: could not open file "results/lotest.txt": No such file or directory
\set newloid_1 :LASTOID
SELECT lo_from_bytea(0, lo_get(:newloid_1)) AS newloid_2
\gset
ERROR:  42704: large object 0 does not exist
SELECT md5(lo_get(:newloid_1)) = md5(lo_get(:newloid_2));
ERROR:  42601: syntax error at or near ":"
LINE 1: SELECT md5(lo_get(0)) = md5(lo_get(:newloid_2));
                                           ^
SELECT lo_get(:newloid_1, 0, 20);
ERROR:  42704: large object 0 does not exist
SELECT lo_get(:newloid_1, 10, 20);
ERROR:  42704: large object 0 does not exist
SELECT lo_put(:newloid_1, 5, decode('afafafaf', 'hex'));
ERROR:  42704: large object 0 does not exist
SELECT lo_get(:newloid_1, 0, 20);
ERROR:  42704: large object 0 does not exist
SELECT lo_put(:newloid_1, 4294967310, 'foo');
ERROR:  42704: large object 0 does not exist
SELECT lo_get(:newloid_1);
ERROR:  42704: large object 0 does not exist
SELECT lo_get(:newloid_1, 4294967294, 100);
ERROR:  42704: large object 0 does not exist
\lo_unlink :newloid_1
ERROR:  42704: large object 0 does not exist
\lo_unlink :newloid_2
ERROR:  42704: large object 0 does not exist
-- This object is left in the database for pg_dump test purposes
SELECT lo_from_bytea(0, E'\\xdeadbeef') AS newloid
\gset
SET bytea_output TO hex;
SET
SELECT lo_get(:newloid);
   lo_get   
------------
 \xdeadbeef
(1 row)

-- Create one more object that we leave behind for testing pg_dump/pg_upgrade;
-- this one intentionally has an OID in the system range
SELECT lo_create(3001);
 lo_create 
-----------
      3001
(1 row)

COMMENT ON LARGE OBJECT 3001 IS 'testing comments';
COMMENT
-- Clean up
DROP TABLE lotest_stash_values;
DROP TABLE
DROP ROLE regresslo;
DROP ROLE
