--
-- ARRAYS
--
CREATE TABLE arrtest (
	a 			int2[],
	b 			int4[][][],
	c 			name[],
	d			text[][],
	e 			float8[],
	f			char(5)[],
	g			varchar(5)[]
);
CREATE TABLE
--
-- only the 'e' array is 0-based, the others are 1-based.
--
INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)
   VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}');
INSERT 0 1
UPDATE arrtest SET e[0] = '1.1';
UPDATE 1
UPDATE arrtest SET e[1] = '2.2';
UPDATE 1
INSERT INTO arrtest (f)
   VALUES ('{"too long"}');
ERROR:  22001: value too long for type character(5)
INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)
   VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}',
           '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',
           '{"abc","abcde"}', '{"abc","abcde"}');
INSERT 0 1
INSERT INTO arrtest (a, b[1:2], c, d[1:2])
   VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}');
INSERT 0 1
SELECT * FROM arrtest;
      a      |        b        |     c     |       d       |        e        |        f        |      g      
-------------+-----------------+-----------+---------------+-----------------+-----------------+-------------
 {1,2,3,4,5} | {{{0,0},{1,2}}} | {}        | {}            | [0:1]={1.1,2.2} | {}              | {}
 {11,12,23}  | {{3,4},{4,5}}   | {foobar}  | {{elt1,elt2}} | {3.4,6.7}       | {"abc  ",abcde} | {abc,abcde}
 {}          | {3,4}           | {foo,bar} | {bar,foo}     |                 |                 | 
(3 rows)

SELECT arrtest.a[1],
          arrtest.b[1][1][1],
          arrtest.c[1],
          arrtest.d[1][1],
          arrtest.e[0]
   FROM arrtest;
 a  | b |   c    |  d   |  e  
----+---+--------+------+-----
  1 | 0 |        |      | 1.1
 11 |   | foobar | elt1 |    
    |   | foo    |      |    
(3 rows)

SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]
   FROM arrtest;
 a  | b |   c    |  d   |  e  
----+---+--------+------+-----
  1 | 0 |        |      | 1.1
 11 |   | foobar | elt1 |    
    |   | foo    |      |    
(3 rows)

SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][1:2]
   FROM arrtest;
     a      |        b        |     c     |       d       
------------+-----------------+-----------+---------------
 {1,2,3}    | {{{0,0},{1,2}}} | {}        | {}
 {11,12,23} | {}              | {foobar}  | {{elt1,elt2}}
 {}         | {}              | {foo,bar} | {}
(3 rows)

SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c
   FROM arrtest;
 a | b | c 
---+---+---
 1 | 3 |  
 1 | 2 | 1
   | 1 | 1
(3 rows)

SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c
   FROM arrtest;
   a   |        b        |   c   
-------+-----------------+-------
 [1:5] | [1:1][1:2][1:2] | 
 [1:3] | [1:2][1:2]      | [1:1]
       | [1:2]           | [1:2]
(3 rows)

-- returns nothing
SELECT *
   FROM arrtest
   WHERE a[1] < 5 and
         c = '{"foobar"}'::_name;
 a | b | c | d | e | f | g 
---+---+---+---+---+---+---
(0 rows)

UPDATE arrtest
  SET a[1:2] = '{16,25}'
  WHERE NOT a = '{}'::_int2;
UPDATE 2
UPDATE arrtest
  SET b[1:1][1:1][1:2] = '{113, 117}',
      b[1:1][1:2][2:2] = '{142, 147}'
  WHERE array_dims(b) = '[1:1][1:2][1:2]';
UPDATE 1
UPDATE arrtest
  SET c[2:2] = '{"new_word"}'
  WHERE array_dims(c) is not null;
UPDATE 2
SELECT a,b,c FROM arrtest;
       a       |           b           |         c         
---------------+-----------------------+-------------------
 {16,25,3,4,5} | {{{113,142},{1,147}}} | {}
 {}            | {3,4}                 | {foo,new_word}
 {16,25,23}    | {{3,4},{4,5}}         | {foobar,new_word}
(3 rows)

SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][2:2]
   FROM arrtest;
     a      |           b           |         c         |    d     
------------+-----------------------+-------------------+----------
 {16,25,3}  | {{{113,142},{1,147}}} | {}                | {}
 {}         | {}                    | {foo,new_word}    | {}
 {16,25,23} | {}                    | {foobar,new_word} | {{elt2}}
(3 rows)

INSERT INTO arrtest(a) VALUES('{1,null,3}');
INSERT 0 1
SELECT a FROM arrtest;
       a       
---------------
 {16,25,3,4,5}
 {}
 {16,25,23}
 {1,NULL,3}
(4 rows)

UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL;
UPDATE 2
SELECT a FROM arrtest WHERE a[2] IS NULL;
        a        
-----------------
 [4:4]={NULL}
 {1,NULL,3,NULL}
(2 rows)

DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL;
DELETE 1
SELECT a,b,c FROM arrtest;
       a       |           b           |         c         
---------------+-----------------------+-------------------
 {16,25,3,4,5} | {{{113,142},{1,147}}} | {}
 {16,25,23}    | {{3,4},{4,5}}         | {foobar,new_word}
 [4:4]={NULL}  | {3,4}                 | {foo,new_word}
(3 rows)

--
-- test array extension
--
CREATE TEMP TABLE arrtest1 (i int[], t text[]);
CREATE TABLE
insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
INSERT 0 1
select * from arrtest1;
      i       |          t          
--------------+---------------------
 {1,2,NULL,4} | {one,two,NULL,four}
(1 row)

update arrtest1 set i[2] = 22, t[2] = 'twenty-two';
UPDATE 1
select * from arrtest1;
       i       |             t              
---------------+----------------------------
 {1,22,NULL,4} | {one,twenty-two,NULL,four}
(1 row)

update arrtest1 set i[5] = 5, t[5] = 'five';
UPDATE 1
select * from arrtest1;
        i        |                t                
-----------------+---------------------------------
 {1,22,NULL,4,5} | {one,twenty-two,NULL,four,five}
(1 row)

update arrtest1 set i[8] = 8, t[8] = 'eight';
UPDATE 1
select * from arrtest1;
              i              |                        t                        
-----------------------------+-------------------------------------------------
 {1,22,NULL,4,5,NULL,NULL,8} | {one,twenty-two,NULL,four,five,NULL,NULL,eight}
(1 row)

update arrtest1 set i[0] = 0, t[0] = 'zero';
UPDATE 1
select * from arrtest1;
                  i                  |                             t                              
-------------------------------------+------------------------------------------------------------
 [0:8]={0,1,22,NULL,4,5,NULL,NULL,8} | [0:8]={zero,one,twenty-two,NULL,four,five,NULL,NULL,eight}
(1 row)

update arrtest1 set i[-3] = -3, t[-3] = 'minus-three';
UPDATE 1
select * from arrtest1;
                         i                         |                                         t                                         
---------------------------------------------------+-----------------------------------------------------------------------------------
 [-3:8]={-3,NULL,NULL,0,1,22,NULL,4,5,NULL,NULL,8} | [-3:8]={minus-three,NULL,NULL,zero,one,twenty-two,NULL,four,five,NULL,NULL,eight}
(1 row)

update arrtest1 set i[0:2] = array[10,11,12], t[0:2] = array['ten','eleven','twelve'];
UPDATE 1
select * from arrtest1;
                          i                          |                                        t                                        
-----------------------------------------------------+---------------------------------------------------------------------------------
 [-3:8]={-3,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,8} | [-3:8]={minus-three,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,eight}
(1 row)

update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20'];
UPDATE 1
select * from arrtest1;
                               i                               |                                            t                                            
---------------------------------------------------------------+-----------------------------------------------------------------------------------------
 [-3:10]={-3,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,18,NULL,20} | [-3:10]={minus-three,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,p18,NULL,p20}
(1 row)

update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22'];
UPDATE 1
select * from arrtest1;
                                   i                                   |                                                t                                                 
-----------------------------------------------------------------------+--------------------------------------------------------------------------------------------------
 [-3:12]={-3,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,18,NULL,20,NULL,22} | [-3:12]={minus-three,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,p18,NULL,p20,NULL,p22}
(1 row)

update arrtest1 set i[15:16] = array[null,26], t[15:16] = array[null,'p26'];
UPDATE 1
select * from arrtest1;
                                            i                                            |                                                          t                                                          
-----------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------
 [-3:16]={-3,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,18,NULL,20,NULL,22,NULL,NULL,NULL,26} | [-3:16]={minus-three,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,p18,NULL,p20,NULL,p22,NULL,NULL,NULL,p26}
(1 row)

update arrtest1 set i[-5:-3] = array[-15,-14,-13], t[-5:-3] = array['m15','m14','m13'];
UPDATE 1
select * from arrtest1;
                                                i                                                 |                                                          t                                                          
--------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------
 [-5:16]={-15,-14,-13,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,18,NULL,20,NULL,22,NULL,NULL,NULL,26} | [-5:16]={m15,m14,m13,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,p18,NULL,p20,NULL,p22,NULL,NULL,NULL,p26}
(1 row)

update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null];
UPDATE 1
select * from arrtest1;
                                                     i                                                     |                                                              t                                                               
-----------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------
 [-7:16]={-17,NULL,-15,-14,-13,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,18,NULL,20,NULL,22,NULL,NULL,NULL,26} | [-7:16]={m17,NULL,m15,m14,m13,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,p18,NULL,p20,NULL,p22,NULL,NULL,NULL,p26}
(1 row)

update arrtest1 set i[-12:-10] = array[-22,null,-20], t[-12:-10] = array['m22',null,'m20'];
UPDATE 1
select * from arrtest1;
                                                                 i                                                                 |                                                                          t                                                                           
-----------------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------
 [-12:16]={-22,NULL,-20,NULL,NULL,-17,NULL,-15,-14,-13,NULL,NULL,10,11,12,NULL,4,5,NULL,NULL,18,NULL,20,NULL,22,NULL,NULL,NULL,26} | [-12:16]={m22,NULL,m20,NULL,NULL,m17,NULL,m15,m14,m13,NULL,NULL,ten,eleven,twelve,NULL,four,five,NULL,NULL,p18,NULL,p20,NULL,p22,NULL,NULL,NULL,p26}
(1 row)

delete from arrtest1;
DELETE 1
insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
INSERT 0 1
select * from arrtest1;
      i       |          t          
--------------+---------------------
 {1,2,NULL,4} | {one,two,NULL,four}
(1 row)

update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5'];
UPDATE 1
select * from arrtest1;
           i            |             t              
------------------------+----------------------------
 [0:5]={0,1,2,NULL,4,5} | [0:5]={z,p1,p2,NULL,p4,p5}
(1 row)

--
-- array expressions and operators
--
-- table creation and INSERTs
CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f float8[], n numeric[], t text[], d timestamp[]);
CREATE TABLE
INSERT INTO arrtest2 VALUES(
  ARRAY[[[113,142],[1,147]]],
  ARRAY[1.1,1.2,1.3]::float8[],
  ARRAY[1.1,1.2,1.3],
  ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],
  ARRAY['19620326','19931223','19970117']::timestamp[]
);
INSERT 0 1
-- some more test data
CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 float8);
CREATE TABLE
insert into arrtest_f values(1,'cat1',1.21);
INSERT 0 1
insert into arrtest_f values(2,'cat1',1.24);
INSERT 0 1
insert into arrtest_f values(3,'cat1',1.18);
INSERT 0 1
insert into arrtest_f values(4,'cat1',1.26);
INSERT 0 1
insert into arrtest_f values(5,'cat1',1.15);
INSERT 0 1
insert into arrtest_f values(6,'cat2',1.15);
INSERT 0 1
insert into arrtest_f values(7,'cat2',1.26);
INSERT 0 1
insert into arrtest_f values(8,'cat2',1.32);
INSERT 0 1
insert into arrtest_f values(9,'cat2',1.30);
INSERT 0 1
CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int);
CREATE TABLE
insert into arrtest_i values(1,'cat1',21);
INSERT 0 1
insert into arrtest_i values(2,'cat1',24);
INSERT 0 1
insert into arrtest_i values(3,'cat1',18);
INSERT 0 1
insert into arrtest_i values(4,'cat1',26);
INSERT 0 1
insert into arrtest_i values(5,'cat1',15);
INSERT 0 1
insert into arrtest_i values(6,'cat2',15);
INSERT 0 1
insert into arrtest_i values(7,'cat2',26);
INSERT 0 1
insert into arrtest_i values(8,'cat2',32);
INSERT 0 1
insert into arrtest_i values(9,'cat2',30);
INSERT 0 1
-- expressions
SELECT t.f[1][3][1] AS "131", t.f[2][2][1] AS "221" FROM (
  SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f
) AS t;
 131 | 221 
-----+-----
 131 | 221
(1 row)

SELECT ARRAY[[[[[['hello'],['world']]]]]];
           array           
---------------------------
 {{{{{{hello},{world}}}}}}
(1 row)

SELECT ARRAY[ARRAY['hello'],ARRAY['world']];
       array       
-------------------
 {{hello},{world}}
(1 row)

SELECT ARRAY(select f2 from arrtest_f order by f2) AS "ARRAY";
                     ARRAY                     
-----------------------------------------------
 {1.15,1.15,1.18,1.21,1.24,1.26,1.26,1.3,1.32}
(1 row)

-- with nulls
SELECT '{1,null,3}'::int[];
    int4    
------------
 {1,NULL,3}
(1 row)

SELECT ARRAY[1,NULL,3];
   array    
------------
 {1,NULL,3}
(1 row)

-- functions
SELECT array_append(array[42], 6) AS "{42,6}";
 {42,6} 
--------
 {42,6}
(1 row)

SELECT array_prepend(6, array[42]) AS "{6,42}";
 {6,42} 
--------
 {6,42}
(1 row)

SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS "{1,2,3,4}";
 {1,2,3,4} 
-----------
 {1,2,3,4}
(1 row)

SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}";
 {{1,2},{3,4},{5,6}} 
---------------------
 {{1,2},{3,4},{5,6}}
(1 row)

SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}";
 {{3,4},{5,6},{1,2}} 
---------------------
 {{3,4},{5,6},{1,2}}
(1 row)

SELECT array_position(ARRAY[1,2,3,4,5], 4);
 array_position 
----------------
              4
(1 row)

SELECT array_position(ARRAY[5,3,4,2,1], 4);
 array_position 
----------------
              3
(1 row)

SELECT array_position(ARRAY[[1,2],[3,4]], 3);
ERROR:  0A000: searching for elements in multidimensional arrays is not supported
SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');
 array_position 
----------------
              2
(1 row)

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'sat');
 array_position 
----------------
              7
(1 row)

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], NULL);
 array_position 
----------------
               
(1 row)

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], NULL);
 array_position 
----------------
              6
(1 row)

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], 'sat');
 array_position 
----------------
              8
(1 row)

SELECT array_positions(NULL, 10);
 array_positions 
-----------------
 
(1 row)

SELECT array_positions(NULL, NULL::int);
 array_positions 
-----------------
 
(1 row)

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4);
 array_positions 
-----------------
 {4,10}
(1 row)

SELECT array_positions(ARRAY[[1,2],[3,4]], 4);
ERROR:  0A000: searching for elements in multidimensional arrays is not supported
SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL);
 array_positions 
-----------------
 {}
(1 row)

SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL);
 array_positions 
-----------------
 {4,10}
(1 row)

SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10
                                          FROM generate_series(1,100) g(i)),
                                  'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1);
 array_length 
--------------
           10
(1 row)

DO $$
DECLARE
  o int;
  a int[] := ARRAY[1,2,3,2,3,1,2];
BEGIN
  o := array_position(a, 2);
  WHILE o IS NOT NULL
  LOOP
    RAISE NOTICE '%', o;
    o := array_position(a, 2, o + 1);
  END LOOP;
END
$$ LANGUAGE plpgsql;
NOTICE:  00000: 2
NOTICE:  00000: 4
NOTICE:  00000: 7
DO
SELECT array_position('[2:4]={1,2,3}'::int[], 1);
 array_position 
----------------
              2
(1 row)

SELECT array_positions('[2:4]={1,2,3}'::int[], 1);
 array_positions 
-----------------
 {2}
(1 row)

SELECT
    array_position(ids, (1, 1)),
    array_positions(ids, (1, 1))
        FROM
(VALUES
    (ARRAY[(0, 0), (1, 1)]),
    (ARRAY[(1, 1)])
) AS f (ids);
 array_position | array_positions 
----------------+-----------------
              2 | {2}
              1 | {1}
(2 rows)

-- operators
SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]];
       a       
---------------
 {16,25,3,4,5}
(1 row)

SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS "FALSE";
 FALSE 
-------
 f
(1 row)

SELECT ARRAY[1,2] || 3 AS "{1,2,3}";
 {1,2,3} 
---------
 {1,2,3}
(1 row)

SELECT 0 || ARRAY[1,2] AS "{0,1,2}";
 {0,1,2} 
---------
 {0,1,2}
(1 row)

SELECT ARRAY[1,2] || ARRAY[3,4] AS "{1,2,3,4}";
 {1,2,3,4} 
-----------
 {1,2,3,4}
(1 row)

SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS "ARRAY";
                ARRAY                 
--------------------------------------
 {{{hello,world}},{{happy,birthday}}}
(1 row)

SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}";
 {{1,2},{3,4},{5,6}} 
---------------------
 {{1,2},{3,4},{5,6}}
(1 row)

SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS "{0,0,1,1,2,2}";
 {0,0,1,1,2,2} 
---------------
 {0,0,1,1,2,2}
(1 row)

SELECT 0 || ARRAY[1,2] || 3 AS "{0,1,2,3}";
 {0,1,2,3} 
-----------
 {0,1,2,3}
(1 row)

SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i = '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i = '{NULL}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t = '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno;
 seqno | i | t 
-------+---+---
(0 rows)

-- array casts
SELECT ARRAY[1,2,3]::text[]::int[]::float8[] AS "{1,2,3}";
 {1,2,3} 
---------
 {1,2,3}
(1 row)

SELECT ARRAY[1,2,3]::text[]::int[]::float8[] is of (float8[]) as "TRUE";
 TRUE 
------
 t
(1 row)

SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS "{{a,bc},{def,hijk}}";
 {{a,bc},{def,hijk}} 
---------------------
 {{a,bc},{def,hijk}}
(1 row)

SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] is of (varchar[]) as "TRUE";
 TRUE 
------
 t
(1 row)

SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as "{{{{{{a,bb,ccc}}}}}}";
 {{{{{{a,bb,ccc}}}}}} 
----------------------
 {{{{{{a,bb,ccc}}}}}}
(1 row)

-- scalar op any/all (array)
select 33 = any ('{1,2,3}');
 ?column? 
----------
 f
(1 row)

select 33 = any ('{1,2,33}');
 ?column? 
----------
 t
(1 row)

select 33 = all ('{1,2,33}');
 ?column? 
----------
 f
(1 row)

select 33 >= all ('{1,2,33}');
 ?column? 
----------
 t
(1 row)

-- boundary cases
select null::int >= all ('{1,2,33}');
 ?column? 
----------
 
(1 row)

select null::int >= all ('{}');
 ?column? 
----------
 t
(1 row)

select null::int >= any ('{}');
 ?column? 
----------
 f
(1 row)

-- cross-datatype
select 33.4 = any (array[1,2,3]);
 ?column? 
----------
 f
(1 row)

select 33.4 > all (array[1,2,3]);
 ?column? 
----------
 t
(1 row)

-- errors
select 33 * any ('{1,2,3}');
ERROR:  42809: op ANY/ALL (array) requires operator to yield boolean
LINE 1: select 33 * any ('{1,2,3}');
                  ^
select 33 * any (44);
ERROR:  42809: op ANY/ALL (array) requires array on right side
LINE 1: select 33 * any (44);
                  ^
-- nulls
select 33 = any (null::int[]);
 ?column? 
----------
 
(1 row)

select null::int = any ('{1,2,3}');
 ?column? 
----------
 
(1 row)

select 33 = any ('{1,null,3}');
 ?column? 
----------
 
(1 row)

select 33 = any ('{1,null,33}');
 ?column? 
----------
 t
(1 row)

select 33 = all (null::int[]);
 ?column? 
----------
 
(1 row)

select null::int = all ('{1,2,3}');
 ?column? 
----------
 
(1 row)

select 33 = all ('{1,null,3}');
 ?column? 
----------
 f
(1 row)

select 33 = all ('{33,null,33}');
 ?column? 
----------
 
(1 row)

-- test indexes on arrays
create temp table arr_tbl (f1 int[] unique);
CREATE TABLE
insert into arr_tbl values ('{1,2,3}');
INSERT 0 1
insert into arr_tbl values ('{1,2}');
INSERT 0 1
-- failure expected:
insert into arr_tbl values ('{1,2,3}');
ERROR:  23505: duplicate key value violates unique constraint "arr_tbl_f1_key"
DETAIL:  Key (f1)=({1,2,3}) already exists.
insert into arr_tbl values ('{2,3,4}');
INSERT 0 1
insert into arr_tbl values ('{1,5,3}');
INSERT 0 1
insert into arr_tbl values ('{1,2,10}');
INSERT 0 1
set enable_seqscan to off;
SET
set enable_bitmapscan to off;
SET
select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}';
    f1    
----------
 {1,2,10}
 {1,5,3}
(2 rows)

select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}';
    f1    
----------
 {1,2,3}
 {1,2,10}
(2 rows)

-- test ON CONFLICT DO UPDATE with arrays
create temp table arr_pk_tbl (pk int4 primary key, f1 int[]);
CREATE TABLE
insert into arr_pk_tbl values (1, '{1,2,3}');
INSERT 0 1
insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)
  do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]
  returning pk, f1;
 pk |   f1    
----+---------
  1 | {3,2,5}
(1 row)

INSERT 0 1
insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)
  do update set f1[1] = excluded.f1[1],
    f1[2] = excluded.f1[2],
    f1[3] = excluded.f1[3]
  returning pk, f1;
 pk |     f1     
----+------------
  1 | {6,7,NULL}
(1 row)

INSERT 0 1
-- note: if above selects don't produce the expected tuple order,
-- then you didn't get an indexscan plan, and something is busted.
reset enable_seqscan;
RESET
reset enable_bitmapscan;
RESET
-- test [not] (like|ilike) (any|all) (...)
select 'foo' like any (array['%a', '%o']); -- t
 ?column? 
----------
 t
(1 row)

select 'foo' like any (array['%a', '%b']); -- f
 ?column? 
----------
 f
(1 row)

select 'foo' like all (array['f%', '%o']); -- t
 ?column? 
----------
 t
(1 row)

select 'foo' like all (array['f%', '%b']); -- f
 ?column? 
----------
 f
(1 row)

select 'foo' not like any (array['%a', '%b']); -- t
 ?column? 
----------
 t
(1 row)

select 'foo' not like all (array['%a', '%o']); -- f
 ?column? 
----------
 f
(1 row)

select 'foo' ilike any (array['%A', '%O']); -- t
 ?column? 
----------
 t
(1 row)

select 'foo' ilike all (array['F%', '%O']); -- t
 ?column? 
----------
 t
(1 row)

--
-- General array parser tests
--
-- none of the following should be accepted
select '{{1,{2}},{2,3}}'::text[];
ERROR:  22P02: malformed array literal: "{{1,{2}},{2,3}}"
LINE 1: select '{{1,{2}},{2,3}}'::text[];
               ^
DETAIL:  Unexpected "{" character.
select '{{},{}}'::text[];
ERROR:  22P02: malformed array literal: "{{},{}}"
LINE 1: select '{{},{}}'::text[];
               ^
DETAIL:  Unexpected "}" character.
select E'{{1,2},\\{2,3}}'::text[];
ERROR:  22P02: malformed array literal: "{{1,2},\{2,3}}"
LINE 1: select E'{{1,2},\\{2,3}}'::text[];
               ^
DETAIL:  Unexpected "\" character.
select '{{"1 2" x},{3}}'::text[];
ERROR:  22P02: malformed array literal: "{{"1 2" x},{3}}"
LINE 1: select '{{"1 2" x},{3}}'::text[];
               ^
DETAIL:  Unexpected array element.
select '{}}'::text[];
ERROR:  22P02: malformed array literal: "{}}"
LINE 1: select '{}}'::text[];
               ^
DETAIL:  Junk after closing right brace.
select '{ }}'::text[];
ERROR:  22P02: malformed array literal: "{ }}"
LINE 1: select '{ }}'::text[];
               ^
DETAIL:  Junk after closing right brace.
select array[];
ERROR:  42P18: cannot determine type of empty array
LINE 1: select array[];
               ^
HINT:  Explicitly cast to the desired type, for example ARRAY[]::integer[].
-- none of the above should be accepted
-- all of the following should be accepted
select '{}'::text[];
 text 
------
 {}
(1 row)

select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[];
                     text                      
-----------------------------------------------
 {{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}
(1 row)

select '{0 second  ,0 second}'::interval[];
      interval       
---------------------
 {00:00:00,00:00:00}
(1 row)

select '{ { "," } , { 3 } }'::text[];
    text     
-------------
 {{","},{3}}
(1 row)

select '  {   {  "  0 second  "   ,  0 second  }   }'::text[];
             text              
-------------------------------
 {{"  0 second  ","0 second"}}
(1 row)

select '{
           0 second,
           @ 1 hour @ 42 minutes @ 20 seconds
         }'::interval[];
      interval       
---------------------
 {00:00:00,01:42:20}
(1 row)

select array[]::text[];
 array 
-------
 {}
(1 row)

select '[0:1]={1.1,2.2}'::float8[];
     float8      
-----------------
 [0:1]={1.1,2.2}
(1 row)

-- all of the above should be accepted
-- tests for array aggregates
CREATE TEMP TABLE arraggtest ( f1 INT[], f2 TEXT[][], f3 FLOAT[]);
CREATE TABLE
INSERT INTO arraggtest (f1, f2, f3) VALUES
('{1,2,3,4}','{{grey,red},{blue,blue}}','{1.6, 0.0}');
INSERT 0 1
INSERT INTO arraggtest (f1, f2, f3) VALUES
('{1,2,3}','{{grey,red},{grey,blue}}','{1.6}');
INSERT 0 1
SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
    max    |   min   |           max            |           min            |   max   |  min  
-----------+---------+--------------------------+--------------------------+---------+-------
 {1,2,3,4} | {1,2,3} | {{grey,red},{grey,blue}} | {{grey,red},{blue,blue}} | {1.6,0} | {1.6}
(1 row)

INSERT INTO arraggtest (f1, f2, f3) VALUES
('{3,3,2,4,5,6}','{{white,yellow},{pink,orange}}','{2.1,3.3,1.8,1.7,1.6}');
INSERT 0 1
SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
      max      |   min   |              max               |           min            |          max          |  min  
---------------+---------+--------------------------------+--------------------------+-----------------------+-------
 {3,3,2,4,5,6} | {1,2,3} | {{white,yellow},{pink,orange}} | {{grey,red},{blue,blue}} | {2.1,3.3,1.8,1.7,1.6} | {1.6}
(1 row)

INSERT INTO arraggtest (f1, f2, f3) VALUES
('{2}','{{black,red},{green,orange}}','{1.6,2.2,2.6,0.4}');
INSERT 0 1
SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
      max      |   min   |              max               |             min              |          max          |  min  
---------------+---------+--------------------------------+------------------------------+-----------------------+-------
 {3,3,2,4,5,6} | {1,2,3} | {{white,yellow},{pink,orange}} | {{black,red},{green,orange}} | {2.1,3.3,1.8,1.7,1.6} | {1.6}
(1 row)

INSERT INTO arraggtest (f1, f2, f3) VALUES
('{4,2,6,7,8,1}','{{red},{black},{purple},{blue},{blue}}',NULL);
INSERT 0 1
SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
      max      |   min   |              max               |             min              |          max          |  min  
---------------+---------+--------------------------------+------------------------------+-----------------------+-------
 {4,2,6,7,8,1} | {1,2,3} | {{white,yellow},{pink,orange}} | {{black,red},{green,orange}} | {2.1,3.3,1.8,1.7,1.6} | {1.6}
(1 row)

INSERT INTO arraggtest (f1, f2, f3) VALUES
('{}','{{pink,white,blue,red,grey,orange}}','{2.1,1.87,1.4,2.2}');
INSERT 0 1
SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
      max      | min |              max               |             min              |          max          |  min  
---------------+-----+--------------------------------+------------------------------+-----------------------+-------
 {4,2,6,7,8,1} | {}  | {{white,yellow},{pink,orange}} | {{black,red},{green,orange}} | {2.1,3.3,1.8,1.7,1.6} | {1.6}
(1 row)

-- A few simple tests for arrays of composite types
create type comptype as (f1 int, f2 text);
CREATE TYPE
create table comptable (c1 comptype, c2 comptype[]);
CREATE TABLE
-- XXX would like to not have to specify row() construct types here ...
insert into comptable
  values (row(1,'foo'), array[row(2,'bar')::comptype, row(3,'baz')::comptype]);
INSERT 0 1
-- check that implicitly named array type _comptype isn't a problem
create type _comptype as enum('fooey');
CREATE TYPE
select * from comptable;
   c1    |          c2           
---------+-----------------------
 (1,foo) | {"(2,bar)","(3,baz)"}
(1 row)

select c2[2].f2 from comptable;
 f2  
-----
 baz
(1 row)

drop type _comptype;
DROP TYPE
drop table comptable;
DROP TABLE
drop type comptype;
DROP TYPE
create or replace function unnest1(anyarray)
returns setof anyelement as $$
select $1[s] from generate_subscripts($1,1) g(s);
$$ language sql immutable;
CREATE FUNCTION
create or replace function unnest2(anyarray)
returns setof anyelement as $$
select $1[s1][s2] from generate_subscripts($1,1) g1(s1),
                   generate_subscripts($1,2) g2(s2);
$$ language sql immutable;
CREATE FUNCTION
select * from unnest1(array[1,2,3]);
 unnest1 
---------
       1
       2
       3
(3 rows)

select * from unnest2(array[[1,2,3],[4,5,6]]);
 unnest2 
---------
       1
       2
       3
       4
       5
       6
(6 rows)

drop function unnest1(anyarray);
DROP FUNCTION
drop function unnest2(anyarray);
DROP FUNCTION
select array_fill(null::integer, array[3,3],array[2,2]);
                           array_fill                            
-----------------------------------------------------------------
 [2:4][2:4]={{NULL,NULL,NULL},{NULL,NULL,NULL},{NULL,NULL,NULL}}
(1 row)

select array_fill(null::integer, array[3,3]);
                      array_fill                      
------------------------------------------------------
 {{NULL,NULL,NULL},{NULL,NULL,NULL},{NULL,NULL,NULL}}
(1 row)

select array_fill(null::text, array[3,3],array[2,2]);
                           array_fill                            
-----------------------------------------------------------------
 [2:4][2:4]={{NULL,NULL,NULL},{NULL,NULL,NULL},{NULL,NULL,NULL}}
(1 row)

select array_fill(null::text, array[3,3]);
                      array_fill                      
------------------------------------------------------
 {{NULL,NULL,NULL},{NULL,NULL,NULL},{NULL,NULL,NULL}}
(1 row)

select array_fill(7, array[3,3],array[2,2]);
              array_fill              
--------------------------------------
 [2:4][2:4]={{7,7,7},{7,7,7},{7,7,7}}
(1 row)

select array_fill(7, array[3,3]);
        array_fill         
---------------------------
 {{7,7,7},{7,7,7},{7,7,7}}
(1 row)

select array_fill('juhu'::text, array[3,3],array[2,2]);
                           array_fill                            
-----------------------------------------------------------------
 [2:4][2:4]={{juhu,juhu,juhu},{juhu,juhu,juhu},{juhu,juhu,juhu}}
(1 row)

select array_fill('juhu'::text, array[3,3]);
                      array_fill                      
------------------------------------------------------
 {{juhu,juhu,juhu},{juhu,juhu,juhu},{juhu,juhu,juhu}}
(1 row)

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, array[0]) as a) ss;
 a  | is_eq | array_dims 
----+-------+------------
 {} | t     | 
(1 row)

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, '{}') as a) ss;
 a  | is_eq | array_dims 
----+-------+------------
 {} | t     | 
(1 row)

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, '{}', '{}') as a) ss;
 a  | is_eq | array_dims 
----+-------+------------
 {} | t     | 
(1 row)

-- raise exception
select array_fill(1, null, array[2,2]);
ERROR:  22004: dimension array or low bound array cannot be null
select array_fill(1, array[2,2], null);
ERROR:  22004: dimension array or low bound array cannot be null
select array_fill(1, array[2,2], '{}');
ERROR:  2202E: wrong number of array subscripts
DETAIL:  Low bound array has different size than dimensions array.
select array_fill(1, array[3,3], array[1,1,1]);
ERROR:  2202E: wrong number of array subscripts
DETAIL:  Low bound array has different size than dimensions array.
select array_fill(1, array[1,2,null]);
ERROR:  22004: dimension values cannot be null
select array_fill(1, array[[1,2],[3,4]]);
ERROR:  2202E: wrong number of array subscripts
DETAIL:  Dimension array must be one dimensional.
select string_to_array('1|2|3', '|');
 string_to_array 
-----------------
 {1,2,3}
(1 row)

select string_to_array('1|2|3|', '|');
 string_to_array 
-----------------
 {1,2,3,""}
(1 row)

select string_to_array('1||2|3||', '||');
 string_to_array 
-----------------
 {1,2|3,""}
(1 row)

select string_to_array('1|2|3', '');
 string_to_array 
-----------------
 {1|2|3}
(1 row)

select string_to_array('', '|');
 string_to_array 
-----------------
 {}
(1 row)

select string_to_array('1|2|3', NULL);
 string_to_array 
-----------------
 {1,|,2,|,3}
(1 row)

select string_to_array(NULL, '|') IS NULL;
 ?column? 
----------
 t
(1 row)

select string_to_array('abc', '');
 string_to_array 
-----------------
 {abc}
(1 row)

select string_to_array('abc', '', 'abc');
 string_to_array 
-----------------
 {NULL}
(1 row)

select string_to_array('abc', ',');
 string_to_array 
-----------------
 {abc}
(1 row)

select string_to_array('abc', ',', 'abc');
 string_to_array 
-----------------
 {NULL}
(1 row)

select string_to_array('1,2,3,4,,6', ',');
 string_to_array 
-----------------
 {1,2,3,4,"",6}
(1 row)

select string_to_array('1,2,3,4,,6', ',', '');
 string_to_array  
------------------
 {1,2,3,4,NULL,6}
(1 row)

select string_to_array('1,2,3,4,*,6', ',', '*');
 string_to_array  
------------------
 {1,2,3,4,NULL,6}
(1 row)

select array_to_string(NULL::int4[], ',') IS NULL;
 ?column? 
----------
 t
(1 row)

select array_to_string('{}'::int4[], ',');
 array_to_string 
-----------------
 
(1 row)

select array_to_string(array[1,2,3,4,NULL,6], ',');
 array_to_string 
-----------------
 1,2,3,4,6
(1 row)

select array_to_string(array[1,2,3,4,NULL,6], ',', '*');
 array_to_string 
-----------------
 1,2,3,4,*,6
(1 row)

select array_to_string(array[1,2,3,4,NULL,6], NULL);
 array_to_string 
-----------------
 
(1 row)

select array_to_string(array[1,2,3,4,NULL,6], ',', NULL);
 array_to_string 
-----------------
 1,2,3,4,6
(1 row)

select array_to_string(string_to_array('1|2|3', '|'), '|');
 array_to_string 
-----------------
 1|2|3
(1 row)

select array_length(array[1,2,3], 1);
 array_length 
--------------
            3
(1 row)

select array_length(array[[1,2,3], [4,5,6]], 0);
 array_length 
--------------
             
(1 row)

select array_length(array[[1,2,3], [4,5,6]], 1);
 array_length 
--------------
            2
(1 row)

select array_length(array[[1,2,3], [4,5,6]], 2);
 array_length 
--------------
            3
(1 row)

select array_length(array[[1,2,3], [4,5,6]], 3);
 array_length 
--------------
             
(1 row)

select cardinality(NULL::int[]);
 cardinality 
-------------
            
(1 row)

select cardinality('{}'::int[]);
 cardinality 
-------------
           0
(1 row)

select cardinality(array[1,2,3]);
 cardinality 
-------------
           3
(1 row)

select cardinality('[2:4]={5,6,7}'::int[]);
 cardinality 
-------------
           3
(1 row)

select cardinality('{{1,2}}'::int[]);
 cardinality 
-------------
           2
(1 row)

select cardinality('{{1,2},{3,4},{5,6}}'::int[]);
 cardinality 
-------------
           6
(1 row)

select cardinality('{{{1,9},{5,6}},{{2,3},{3,4}}}'::int[]);
 cardinality 
-------------
           8
(1 row)

-- array_agg(anynonarray)
select array_agg(unique1) from (select unique1 from tenk1 where unique1 < 15 order by unique1) ss;
 array_agg 
-----------
 
(1 row)

select array_agg(ten) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
 array_agg 
-----------
 
(1 row)

select array_agg(nullif(ten, 4)) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
 array_agg 
-----------
 
(1 row)

select array_agg(unique1) from tenk1 where unique1 < -15;
 array_agg 
-----------
 
(1 row)

-- array_agg(anyarray)
select array_agg(ar)
  from (values ('{1,2}'::int[]), ('{3,4}'::int[])) v(ar);
   array_agg   
---------------
 {{1,2},{3,4}}
(1 row)

select array_agg(distinct ar order by ar desc)
  from (select array[i / 2] from generate_series(1,10) a(i)) b(ar);
         array_agg         
---------------------------
 {{5},{4},{3},{2},{1},{0}}
(1 row)

select array_agg(ar)
  from (select array_agg(array[i, i+1, i-1])
        from generate_series(1,2) a(i)) b(ar);
      array_agg      
---------------------
 {{{1,2,0},{2,3,1}}}
(1 row)

select array_agg(array[i+1.2, i+1.3, i+1.4]) from generate_series(1,3) g(i);
                  array_agg                  
---------------------------------------------
 {{2.2,2.3,2.4},{3.2,3.3,3.4},{4.2,4.3,4.4}}
(1 row)

select array_agg(array['Hello', i::text]) from generate_series(9,11) g(i);
             array_agg             
-----------------------------------
 {{Hello,9},{Hello,10},{Hello,11}}
(1 row)

select array_agg(array[i, nullif(i, 3), i+1]) from generate_series(1,4) g(i);
              array_agg               
--------------------------------------
 {{1,1,2},{2,2,3},{3,NULL,4},{4,4,5}}
(1 row)

-- errors
select array_agg('{}'::int[]) from generate_series(1,2);
ERROR:  2202E: cannot accumulate empty arrays
select array_agg(null::int[]) from generate_series(1,2);
ERROR:  22004: cannot accumulate null arrays
select array_agg(ar)
  from (values ('{1,2}'::int[]), ('{3}'::int[])) v(ar);
ERROR:  2202E: cannot accumulate arrays of different dimensionality
select unnest(array[1,2,3]);
 unnest 
--------
      1
      2
      3
(3 rows)

select * from unnest(array[1,2,3]);
 unnest 
--------
      1
      2
      3
(3 rows)

select unnest(array[1,2,3,4.5]::float8[]);
 unnest 
--------
      1
      2
      3
    4.5
(4 rows)

select unnest(array[1,2,3,4.5]::numeric[]);
 unnest 
--------
      1
      2
      3
    4.5
(4 rows)

select unnest(array[1,2,3,null,4,null,null,5,6]);
 unnest 
--------
      1
      2
      3
       
      4
       
       
      5
      6
(9 rows)

select unnest(array[1,2,3,null,4,null,null,5,6]::text[]);
 unnest 
--------
 1
 2
 3
 
 4
 
 
 5
 6
(9 rows)

select abs(unnest(array[1,2,null,-3]));
 abs 
-----
   1
   2
    
   3
(4 rows)

select array_remove(array[1,2,2,3], 2);
 array_remove 
--------------
 {1,3}
(1 row)

select array_remove(array[1,2,2,3], 5);
 array_remove 
--------------
 {1,2,2,3}
(1 row)

select array_remove(array[1,NULL,NULL,3], NULL);
 array_remove 
--------------
 {1,3}
(1 row)

select array_remove(array['A','CC','D','C','RR'], 'RR');
 array_remove 
--------------
 {A,CC,D,C}
(1 row)

select array_remove('{{1,2,2},{1,4,3}}', 2); -- not allowed
ERROR:  0A000: removing elements from multidimensional arrays is not supported
select array_remove(array['X','X','X'], 'X') = '{}';
 ?column? 
----------
 t
(1 row)

select array_replace(array[1,2,5,4],5,3);
 array_replace 
---------------
 {1,2,3,4}
(1 row)

select array_replace(array[1,2,5,4],5,NULL);
 array_replace 
---------------
 {1,2,NULL,4}
(1 row)

select array_replace(array[1,2,NULL,4,NULL],NULL,5);
 array_replace 
---------------
 {1,2,5,4,5}
(1 row)

select array_replace(array['A','B','DD','B'],'B','CC');
 array_replace 
---------------
 {A,CC,DD,CC}
(1 row)

select array_replace(array[1,NULL,3],NULL,NULL);
 array_replace 
---------------
 {1,NULL,3}
(1 row)

select array_replace(array['AB',NULL,'CDE'],NULL,'12');
 array_replace 
---------------
 {AB,12,CDE}
(1 row)

-- array(select array-value ...)
select array(select array[i,i/2] from generate_series(1,5) i);
              array              
---------------------------------
 {{1,0},{2,1},{3,1},{4,2},{5,2}}
(1 row)

select array(select array['Hello', i::text] from generate_series(9,11) i);
               array               
-----------------------------------
 {{Hello,9},{Hello,10},{Hello,11}}
(1 row)

-- Insert/update on a column that is array of composite
create temp table t1 (f1 int8_tbl[]);
CREATE TABLE
insert into t1 (f1[5].q1) values(42);
INSERT 0 1
select * from t1;
       f1        
-----------------
 [5:5]={"(42,)"}
(1 row)

update t1 set f1[5].q2 = 43;
UPDATE 1
select * from t1;
        f1         
-------------------
 [5:5]={"(42,43)"}
(1 row)

-- Check that arrays of composites are safely detoasted when needed
create temp table src (f1 text);
CREATE TABLE
insert into src
  select string_agg(random()::text,'') from generate_series(1,10000);
INSERT 0 1
create type textandtext as (c1 text, c2 text);
CREATE TYPE
create temp table dest (f1 textandtext[]);
CREATE TABLE
insert into dest select array[row(f1,f1)::textandtext] from src;
INSERT 0 1
select length(md5((f1[1]).c2)) from dest;
 length 
--------
     32
(1 row)

delete from src;
DELETE 1
select length(md5((f1[1]).c2)) from dest;
 length 
--------
     32
(1 row)

truncate table src;
TRUNCATE TABLE
drop table src;
DROP TABLE
select length(md5((f1[1]).c2)) from dest;
 length 
--------
     32
(1 row)

drop table dest;
DROP TABLE
drop type textandtext;
DROP TYPE
-- Tests for polymorphic-array form of width_bucket()
-- this exercises the varwidth and float8 code paths
SELECT
    op,
    width_bucket(op::numeric, ARRAY[1, 3, 5, 10.0]::numeric[]) AS wb_n1,
    width_bucket(op::numeric, ARRAY[0, 5.5, 9.99]::numeric[]) AS wb_n2,
    width_bucket(op::numeric, ARRAY[-6, -5, 2.0]::numeric[]) AS wb_n3,
    width_bucket(op::float8, ARRAY[1, 3, 5, 10.0]::float8[]) AS wb_f1,
    width_bucket(op::float8, ARRAY[0, 5.5, 9.99]::float8[]) AS wb_f2,
    width_bucket(op::float8, ARRAY[-6, -5, 2.0]::float8[]) AS wb_f3
FROM (VALUES
  (-5.2),
  (-0.0000000001),
  (0.000000000001),
  (1),
  (1.99999999999999),
  (2),
  (2.00000000000001),
  (3),
  (4),
  (4.5),
  (5),
  (5.5),
  (6),
  (7),
  (8),
  (9),
  (9.99999999999999),
  (10),
  (10.0000000000001)
) v(op);
        op        | wb_n1 | wb_n2 | wb_n3 | wb_f1 | wb_f2 | wb_f3 
------------------+-------+-------+-------+-------+-------+-------
             -5.2 |     0 |     0 |     1 |     0 |     0 |     1
    -0.0000000001 |     0 |     0 |     2 |     0 |     0 |     2
   0.000000000001 |     0 |     1 |     2 |     0 |     1 |     2
                1 |     1 |     1 |     2 |     1 |     1 |     2
 1.99999999999999 |     1 |     1 |     2 |     1 |     1 |     2
                2 |     1 |     1 |     3 |     1 |     1 |     3
 2.00000000000001 |     1 |     1 |     3 |     1 |     1 |     3
                3 |     2 |     1 |     3 |     2 |     1 |     3
                4 |     2 |     1 |     3 |     2 |     1 |     3
              4.5 |     2 |     1 |     3 |     2 |     1 |     3
                5 |     3 |     1 |     3 |     3 |     1 |     3
              5.5 |     3 |     2 |     3 |     3 |     2 |     3
                6 |     3 |     2 |     3 |     3 |     2 |     3
                7 |     3 |     2 |     3 |     3 |     2 |     3
                8 |     3 |     2 |     3 |     3 |     2 |     3
                9 |     3 |     2 |     3 |     3 |     2 |     3
 9.99999999999999 |     3 |     3 |     3 |     3 |     3 |     3
               10 |     4 |     3 |     3 |     4 |     3 |     3
 10.0000000000001 |     4 |     3 |     3 |     4 |     3 |     3
(19 rows)

-- ensure float8 path handles NaN properly
SELECT
    op,
    width_bucket(op, ARRAY[1, 3, 9, 'NaN', 'NaN']::float8[]) AS wb
FROM (VALUES
  (-5.2::float8),
  (4::float8),
  (77::float8),
  ('NaN'::float8)
) v(op);
  op  | wb 
------+----
 -5.2 |  0
    4 |  2
   77 |  3
  NaN |  5
(4 rows)

-- these exercise the generic fixed-width code path
SELECT
    op,
    width_bucket(op, ARRAY[1, 3, 5, 10]) AS wb_1
FROM generate_series(0,11) as op;
 op | wb_1 
----+------
  0 |    0
  1 |    1
  2 |    1
  3 |    2
  4 |    2
  5 |    3
  6 |    3
  7 |    3
  8 |    3
  9 |    3
 10 |    4
 11 |    4
(12 rows)

SELECT width_bucket(now(),
                    array['yesterday', 'today', 'tomorrow']::timestamptz[]);
 width_bucket 
--------------
            2
(1 row)

-- corner cases
SELECT width_bucket(5, ARRAY[3]);
 width_bucket 
--------------
            1
(1 row)

SELECT width_bucket(5, '{}');
 width_bucket 
--------------
            0
(1 row)

-- error cases
SELECT width_bucket('5'::text, ARRAY[3, 4]::integer[]);
ERROR:  42883: function width_bucket(text, integer[]) does not exist
LINE 1: SELECT width_bucket('5'::text, ARRAY[3, 4]::integer[]);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT width_bucket(5, ARRAY[3, 4, NULL]);
ERROR:  22004: thresholds array must not contain NULLs
SELECT width_bucket(5, ARRAY[ARRAY[1, 2], ARRAY[3, 4]]);
ERROR:  2202E: thresholds must be one-dimensional array
