--
-- Cursor regression tests
--
BEGIN;
BEGIN
DECLARE foo1 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo2 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo3 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo4 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo5 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo6 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo7 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo8 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo9 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo10 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo11 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo12 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo13 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo14 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo15 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo16 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo17 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo18 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo19 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo20 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo21 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
DECLARE foo22 SCROLL CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DECLARE foo23 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
FETCH 1 in foo1;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 2 in foo2;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 3 in foo3;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 4 in foo4;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 5 in foo5;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 6 in foo6;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 7 in foo7;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 8 in foo8;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 9 in foo9;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 10 in foo10;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 11 in foo11;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 12 in foo12;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 13 in foo13;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 14 in foo14;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 15 in foo15;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 16 in foo16;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 17 in foo17;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 18 in foo18;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 19 in foo19;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 20 in foo20;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 21 in foo21;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 22 in foo22;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH 23 in foo23;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 1 in foo23;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 2 in foo22;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 3 in foo21;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 4 in foo20;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 5 in foo19;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 6 in foo18;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 7 in foo17;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 8 in foo16;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 9 in foo15;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 10 in foo14;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 11 in foo13;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 12 in foo12;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 13 in foo11;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 14 in foo10;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 15 in foo9;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 16 in foo8;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 17 in foo7;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 18 in foo6;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 19 in foo5;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 20 in foo4;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 21 in foo3;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 22 in foo2;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH backward 23 in foo1;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

CLOSE foo1;
CLOSE CURSOR
CLOSE foo2;
CLOSE CURSOR
CLOSE foo3;
CLOSE CURSOR
CLOSE foo4;
CLOSE CURSOR
CLOSE foo5;
CLOSE CURSOR
CLOSE foo6;
CLOSE CURSOR
CLOSE foo7;
CLOSE CURSOR
CLOSE foo8;
CLOSE CURSOR
CLOSE foo9;
CLOSE CURSOR
CLOSE foo10;
CLOSE CURSOR
CLOSE foo11;
CLOSE CURSOR
CLOSE foo12;
CLOSE CURSOR
-- leave some cursors open, to test that auto-close works.
-- record this in the system view as well (don't query the time field there
-- however)
SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors ORDER BY 1;
 name  |                               statement                               | is_holdable | is_binary | is_scrollable 
-------+-----------------------------------------------------------------------+-------------+-----------+---------------
 foo13 | DECLARE foo13 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2; | f           | f         | t
 foo14 | DECLARE foo14 SCROLL CURSOR FOR SELECT * FROM tenk2;                  | f           | f         | t
 foo15 | DECLARE foo15 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2; | f           | f         | t
 foo16 | DECLARE foo16 SCROLL CURSOR FOR SELECT * FROM tenk2;                  | f           | f         | t
 foo17 | DECLARE foo17 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2; | f           | f         | t
 foo18 | DECLARE foo18 SCROLL CURSOR FOR SELECT * FROM tenk2;                  | f           | f         | t
 foo19 | DECLARE foo19 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2; | f           | f         | t
 foo20 | DECLARE foo20 SCROLL CURSOR FOR SELECT * FROM tenk2;                  | f           | f         | t
 foo21 | DECLARE foo21 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2; | f           | f         | t
 foo22 | DECLARE foo22 SCROLL CURSOR FOR SELECT * FROM tenk2;                  | f           | f         | t
 foo23 | DECLARE foo23 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2; | f           | f         | t
(11 rows)

END;
COMMIT
SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 name | statement | is_holdable | is_binary | is_scrollable 
------+-----------+-------------+-----------+---------------
(0 rows)

--
-- NO SCROLL disallows backward fetching
--
BEGIN;
BEGIN
DECLARE foo24 NO SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
FETCH 1 FROM foo24;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH BACKWARD 1 FROM foo24; -- should fail
ERROR:  55000: cursor can only scan forward
HINT:  Declare it with SCROLL option to enable backward scan.
END;
ROLLBACK
--
-- Cursors outside transaction blocks
--
SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 name | statement | is_holdable | is_binary | is_scrollable 
------+-----------+-------------+-----------+---------------
(0 rows)

BEGIN;
BEGIN
DECLARE foo25 SCROLL CURSOR WITH HOLD FOR SELECT * FROM tenk2;
DECLARE CURSOR
FETCH FROM foo25;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH FROM foo25;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

COMMIT;
COMMIT
FETCH FROM foo25;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH BACKWARD FROM foo25;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

FETCH ABSOLUTE -1 FROM foo25;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
(0 rows)

SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 name  |                           statement                            | is_holdable | is_binary | is_scrollable 
-------+----------------------------------------------------------------+-------------+-----------+---------------
 foo25 | DECLARE foo25 SCROLL CURSOR WITH HOLD FOR SELECT * FROM tenk2; | t           | f         | t
(1 row)

CLOSE foo25;
CLOSE CURSOR
--
-- ROLLBACK should close holdable cursors
--
BEGIN;
BEGIN
DECLARE foo26 CURSOR WITH HOLD FOR SELECT * FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
ROLLBACK;
ROLLBACK
-- should fail
FETCH FROM foo26;
ERROR:  34000: cursor "foo26" does not exist
--
-- Parameterized DECLARE needs to insert param values into the cursor portal
--
BEGIN;
BEGIN
CREATE FUNCTION declares_cursor(text)
   RETURNS void
   AS 'DECLARE c CURSOR FOR SELECT stringu1 FROM tenk1 WHERE stringu1 LIKE $1;'
   LANGUAGE SQL;
CREATE FUNCTION
SELECT declares_cursor('AB%');
 declares_cursor 
-----------------
 
(1 row)

FETCH ALL FROM c;
 stringu1 
----------
(0 rows)

ROLLBACK;
ROLLBACK
--
-- Test behavior of both volatile and stable functions inside a cursor;
-- in particular we want to see what happens during commit of a holdable
-- cursor
--
create temp table tt1(f1 int);
CREATE TABLE
create function count_tt1_v() returns int8 as
'select count(*) from tt1' language sql volatile;
CREATE FUNCTION
create function count_tt1_s() returns int8 as
'select count(*) from tt1' language sql stable;
CREATE FUNCTION
begin;
BEGIN
insert into tt1 values(1);
INSERT 0 1
declare c1 cursor for select count_tt1_v(), count_tt1_s();
DECLARE CURSOR
insert into tt1 values(2);
INSERT 0 1
fetch all from c1;
 count_tt1_v | count_tt1_s 
-------------+-------------
           2 |           1
(1 row)

rollback;
ROLLBACK
begin;
BEGIN
insert into tt1 values(1);
INSERT 0 1
declare c2 cursor with hold for select count_tt1_v(), count_tt1_s();
DECLARE CURSOR
insert into tt1 values(2);
INSERT 0 1
commit;
COMMIT
delete from tt1;
DELETE 2
fetch all from c2;
 count_tt1_v | count_tt1_s 
-------------+-------------
           2 |           1
(1 row)

drop function count_tt1_v();
DROP FUNCTION
drop function count_tt1_s();
DROP FUNCTION
-- Create a cursor with the BINARY option and check the pg_cursors view
BEGIN;
BEGIN
SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
 name |                              statement                               | is_holdable | is_binary | is_scrollable 
------+----------------------------------------------------------------------+-------------+-----------+---------------
 c2   | declare c2 cursor with hold for select count_tt1_v(), count_tt1_s(); | t           | f         | f
(1 row)

DECLARE bc BINARY CURSOR FOR SELECT * FROM tenk1;
DECLARE CURSOR
SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors ORDER BY 1;
 name |                              statement                               | is_holdable | is_binary | is_scrollable 
------+----------------------------------------------------------------------+-------------+-----------+---------------
 bc   | DECLARE bc BINARY CURSOR FOR SELECT * FROM tenk1;                    | f           | t         | t
 c2   | declare c2 cursor with hold for select count_tt1_v(), count_tt1_s(); | t           | f         | f
(2 rows)

ROLLBACK;
ROLLBACK
-- We should not see the portal that is created internally to
-- implement EXECUTE in pg_cursors
PREPARE cprep AS
  SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
PREPARE
EXECUTE cprep;
 name |                              statement                               | is_holdable | is_binary | is_scrollable 
------+----------------------------------------------------------------------+-------------+-----------+---------------
 c2   | declare c2 cursor with hold for select count_tt1_v(), count_tt1_s(); | t           | f         | f
(1 row)

-- test CLOSE ALL;
SELECT name FROM pg_cursors ORDER BY 1;
 name 
------
 c2
(1 row)

CLOSE ALL;
CLOSE CURSOR ALL
SELECT name FROM pg_cursors ORDER BY 1;
 name 
------
(0 rows)

BEGIN;
BEGIN
DECLARE foo1 CURSOR WITH HOLD FOR SELECT 1;
DECLARE CURSOR
DECLARE foo2 CURSOR WITHOUT HOLD FOR SELECT 1;
DECLARE CURSOR
SELECT name FROM pg_cursors ORDER BY 1;
 name 
------
 foo1
 foo2
(2 rows)

CLOSE ALL;
CLOSE CURSOR ALL
SELECT name FROM pg_cursors ORDER BY 1;
 name 
------
(0 rows)

COMMIT;
COMMIT
--
-- Tests for updatable cursors
--
CREATE TEMP TABLE uctest(f1 int, f2 text);
CREATE TABLE
INSERT INTO uctest VALUES (1, 'one'), (2, 'two'), (3, 'three');
INSERT 0 3
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  1 | one
  2 | two
  3 | three
(3 rows)

-- Check DELETE WHERE CURRENT
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest;
DECLARE CURSOR
FETCH 2 FROM c1;
 f1 | f2  
----+-----
  1 | one
  2 | two
(2 rows)

DELETE FROM uctest WHERE CURRENT OF c1;
DELETE 1
-- should show deletion
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  1 | one
  3 | three
(2 rows)

-- cursor did not move
FETCH ALL FROM c1;
 f1 |  f2   
----+-------
  3 | three
(1 row)

-- cursor is insensitive
MOVE BACKWARD ALL IN c1;
MOVE 3
FETCH ALL FROM c1;
 f1 |  f2   
----+-------
  1 | one
  2 | two
  3 | three
(3 rows)

COMMIT;
COMMIT
-- should still see deletion
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  1 | one
  3 | three
(2 rows)

-- Check UPDATE WHERE CURRENT; this time use FOR UPDATE
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
DECLARE CURSOR
FETCH c1;
 f1 | f2  
----+-----
  1 | one
(1 row)

UPDATE uctest SET f1 = 8 WHERE CURRENT OF c1;
UPDATE 1
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  3 | three
  8 | one
(2 rows)

COMMIT;
COMMIT
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  3 | three
  8 | one
(2 rows)

-- Check repeated-update and update-then-delete cases
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest;
DECLARE CURSOR
FETCH c1;
 f1 |  f2   
----+-------
  3 | three
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  8 | one
 13 | three
(2 rows)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  8 | one
 23 | three
(2 rows)

-- insensitive cursor should not show effects of updates or deletes
FETCH RELATIVE 0 FROM c1;
 f1 |  f2   
----+-------
  3 | three
(1 row)

DELETE FROM uctest WHERE CURRENT OF c1;
DELETE 1
SELECT * FROM uctest;
 f1 | f2  
----+-----
  8 | one
(1 row)

DELETE FROM uctest WHERE CURRENT OF c1; -- no-op
DELETE 0
SELECT * FROM uctest;
 f1 | f2  
----+-----
  8 | one
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1; -- no-op
UPDATE 0
SELECT * FROM uctest;
 f1 | f2  
----+-----
  8 | one
(1 row)

FETCH RELATIVE 0 FROM c1;
 f1 |  f2   
----+-------
  3 | three
(1 row)

ROLLBACK;
ROLLBACK
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  3 | three
  8 | one
(2 rows)

BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
DECLARE CURSOR
FETCH c1;
 f1 |  f2   
----+-------
  3 | three
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  8 | one
 13 | three
(2 rows)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  8 | one
 23 | three
(2 rows)

DELETE FROM uctest WHERE CURRENT OF c1;
DELETE 1
SELECT * FROM uctest;
 f1 | f2  
----+-----
  8 | one
(1 row)

DELETE FROM uctest WHERE CURRENT OF c1; -- no-op
DELETE 0
SELECT * FROM uctest;
 f1 | f2  
----+-----
  8 | one
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1; -- no-op
UPDATE 0
SELECT * FROM uctest;
 f1 | f2  
----+-----
  8 | one
(1 row)

--- sensitive cursors can't currently scroll back, so this is an error:
FETCH RELATIVE 0 FROM c1;
ERROR:  55000: cursor can only scan forward
HINT:  Declare it with SCROLL option to enable backward scan.
ROLLBACK;
ROLLBACK
SELECT * FROM uctest;
 f1 |  f2   
----+-------
  3 | three
  8 | one
(2 rows)

-- Check inheritance cases
CREATE TEMP TABLE ucchild () inherits (uctest);
CREATE TABLE
INSERT INTO ucchild values(100, 'hundred');
INSERT 0 1
SELECT * FROM uctest;
 f1  |   f2    
-----+---------
   3 | three
   8 | one
 100 | hundred
(3 rows)

BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
DECLARE CURSOR
FETCH 1 FROM c1;
 f1 |  f2   
----+-------
  3 | three
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
FETCH 1 FROM c1;
 f1 | f2  
----+-----
  8 | one
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
FETCH 1 FROM c1;
 f1  |   f2    
-----+---------
 100 | hundred
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
FETCH 1 FROM c1;
 f1 | f2 
----+----
(0 rows)

COMMIT;
COMMIT
SELECT * FROM uctest;
 f1  |   f2    
-----+---------
  13 | three
  18 | one
 110 | hundred
(3 rows)

-- Can update from a self-join, but only if FOR UPDATE says which to use
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5;
DECLARE CURSOR
FETCH 1 FROM c1;
 f1 | f2  | f1 |  f2   
----+-----+----+-------
 18 | one | 13 | three
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;  -- fail
ERROR:  24000: cursor "c1" is not a simply updatable scan of table "uctest"
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR UPDATE;
DECLARE CURSOR
FETCH 1 FROM c1;
 f1 | f2  | f1 |  f2   
----+-----+----+-------
 18 | one | 13 | three
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;  -- fail
ERROR:  24000: cursor "c1" has multiple FOR UPDATE/SHARE references to table "uctest"
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR SHARE OF a;
DECLARE CURSOR
FETCH 1 FROM c1;
 f1 | f2  | f1 |  f2   
----+-----+----+-------
 18 | one | 13 | three
(1 row)

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
UPDATE 1
SELECT * FROM uctest;
 f1  |   f2    
-----+---------
  13 | three
  28 | one
 110 | hundred
(3 rows)

ROLLBACK;
ROLLBACK
-- Check various error cases
DELETE FROM uctest WHERE CURRENT OF c1;  -- fail, no such cursor
ERROR:  34000: cursor "c1" does not exist
DECLARE cx CURSOR WITH HOLD FOR SELECT * FROM uctest;
DECLARE CURSOR
DELETE FROM uctest WHERE CURRENT OF cx;  -- fail, can't use held cursor
ERROR:  24000: cursor "cx" is held from a previous transaction
BEGIN;
BEGIN
DECLARE c CURSOR FOR SELECT * FROM tenk2;
DECLARE CURSOR
DELETE FROM uctest WHERE CURRENT OF c;  -- fail, cursor on wrong table
ERROR:  24000: cursor "c" is not a simply updatable scan of table "uctest"
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c CURSOR FOR SELECT * FROM tenk2 FOR SHARE;
DECLARE CURSOR
DELETE FROM uctest WHERE CURRENT OF c;  -- fail, cursor on wrong table
ERROR:  24000: cursor "c" does not have a FOR UPDATE/SHARE reference to table "uctest"
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c CURSOR FOR SELECT * FROM tenk1 JOIN tenk2 USING (unique1);
DECLARE CURSOR
DELETE FROM tenk1 WHERE CURRENT OF c;  -- fail, cursor is on a join
ERROR:  24000: cursor "c" is not a simply updatable scan of table "tenk1"
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c CURSOR FOR SELECT f1,count(*) FROM uctest GROUP BY f1;
DECLARE CURSOR
DELETE FROM uctest WHERE CURRENT OF c;  -- fail, cursor is on aggregation
ERROR:  24000: cursor "c" is not a simply updatable scan of table "uctest"
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM uctest;
DECLARE CURSOR
DELETE FROM uctest WHERE CURRENT OF c1; -- fail, no current row
ERROR:  24000: cursor "c1" is not positioned on a row
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT MIN(f1) FROM uctest FOR UPDATE;
ERROR:  0A000: FOR UPDATE is not allowed with aggregate functions
ROLLBACK;
ROLLBACK
-- WHERE CURRENT OF may someday work with views, but today is not that day.
-- For now, just make sure it errors out cleanly.
CREATE TEMP VIEW ucview AS SELECT * FROM uctest;
CREATE VIEW
CREATE RULE ucrule AS ON DELETE TO ucview DO INSTEAD
  DELETE FROM uctest WHERE f1 = OLD.f1;
CREATE RULE
BEGIN;
BEGIN
DECLARE c1 CURSOR FOR SELECT * FROM ucview;
DECLARE CURSOR
FETCH FROM c1;
 f1 |  f2   
----+-------
 13 | three
(1 row)

DELETE FROM ucview WHERE CURRENT OF c1; -- fail, views not supported
ERROR:  0A000: WHERE CURRENT OF on a view is not implemented
ROLLBACK;
ROLLBACK
-- Make sure snapshot management works okay, per bug report in
-- 235395b90909301035v7228ce63q392931f15aa74b31@mail.gmail.com
BEGIN;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SET
CREATE TABLE cursor (a int);
CREATE TABLE
INSERT INTO cursor VALUES (1);
INSERT 0 1
DECLARE c1 NO SCROLL CURSOR FOR SELECT * FROM cursor FOR UPDATE;
DECLARE CURSOR
UPDATE cursor SET a = 2;
UPDATE 1
FETCH ALL FROM c1;
 a 
---
(0 rows)

COMMIT;
COMMIT
DROP TABLE cursor;
DROP TABLE
-- Check rewinding a cursor containing a stable function in LIMIT,
-- per bug report in 8336843.9833.1399385291498.JavaMail.root@quick
begin;
BEGIN
create function nochange(int) returns int
  as 'select $1 limit 1' language sql stable;
CREATE FUNCTION
declare c cursor for select * from int8_tbl limit nochange(3);
DECLARE CURSOR
fetch all from c;
        q1        |        q2        
------------------+------------------
              123 |              456
              123 | 4567890123456789
 4567890123456789 |              123
(3 rows)

move backward all in c;
MOVE 3
fetch all from c;
        q1        |        q2        
------------------+------------------
              123 |              456
              123 | 4567890123456789
 4567890123456789 |              123
(3 rows)

rollback;
ROLLBACK
