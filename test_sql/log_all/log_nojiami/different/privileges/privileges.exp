--
-- Test access privileges
--
-- Clean up in case a prior regression run failed
-- Suppress NOTICE messages when users/groups don't exist
SET client_min_messages TO 'warning';
SET
DROP ROLE IF EXISTS regressgroup1;
DROP ROLE
DROP ROLE IF EXISTS regressgroup2;
DROP ROLE
DROP ROLE IF EXISTS regressuser1;
DROP ROLE
DROP ROLE IF EXISTS regressuser2;
DROP ROLE
DROP ROLE IF EXISTS regressuser3;
DROP ROLE
DROP ROLE IF EXISTS regressuser4;
DROP ROLE
DROP ROLE IF EXISTS regressuser5;
DROP ROLE
DROP ROLE IF EXISTS regressuser6;
DROP ROLE
SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
 lo_unlink 
-----------
(0 rows)

RESET client_min_messages;
RESET
-- test proper begins here
CREATE USER regressuser1;
CREATE ROLE
CREATE USER regressuser2;
CREATE ROLE
CREATE USER regressuser3;
CREATE ROLE
CREATE USER regressuser4;
CREATE ROLE
CREATE USER regressuser5;
CREATE ROLE
CREATE USER regressuser5;	-- duplicate
ERROR:  42710: role "regressuser5" already exists
CREATE GROUP regressgroup1;
CREATE ROLE
CREATE GROUP regressgroup2 WITH USER regressuser1, regressuser2;
CREATE ROLE
ALTER GROUP regressgroup1 ADD USER regressuser4;
ALTER ROLE
ALTER GROUP regressgroup2 ADD USER regressuser2;	-- duplicate
NOTICE:  role "regressuser2" is already a member of role "regressgroup2"
ALTER ROLE
ALTER GROUP regressgroup2 DROP USER regressuser2;
ALTER ROLE
GRANT regressgroup2 TO regressuser4 WITH ADMIN OPTION;
GRANT ROLE
-- test owner privileges
SET SESSION AUTHORIZATION regressuser1;
SET
SELECT session_user, current_user;
 session_user | current_user 
--------------+--------------
 regressuser1 | regressuser1
(1 row)

CREATE TABLE atest1 ( a int, b text );
CREATE TABLE
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

INSERT INTO atest1 VALUES (1, 'one');
INSERT 0 1
DELETE FROM atest1;
DELETE 1
UPDATE atest1 SET a = 1 WHERE b = 'blech';
UPDATE 0
TRUNCATE atest1;
TRUNCATE TABLE
BEGIN;
BEGIN
LOCK atest1 IN ACCESS EXCLUSIVE MODE;
LOCK TABLE
COMMIT;
COMMIT
REVOKE ALL ON atest1 FROM PUBLIC;
REVOKE
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

GRANT ALL ON atest1 TO regressuser2;
GRANT
GRANT SELECT ON atest1 TO regressuser3, regressuser4;
GRANT
SELECT * FROM atest1;
 a | b 
---+---
(0 rows)

CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
CREATE TABLE
GRANT SELECT ON atest2 TO regressuser2;
GRANT
GRANT UPDATE ON atest2 TO regressuser3;
GRANT
GRANT INSERT ON atest2 TO regressuser4;
GRANT
GRANT TRUNCATE ON atest2 TO regressuser5;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT session_user, current_user;
 session_user | current_user 
--------------+--------------
 regressuser2 | regressuser2
(1 row)

-- try various combinations of queries on atest1 and atest2
SELECT * FROM atest1; -- ok
 a | b 
---+---
(0 rows)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
(0 rows)

INSERT INTO atest1 VALUES (2, 'two'); -- ok
INSERT 0 1
INSERT INTO atest2 VALUES ('foo', true); -- fail
ERROR:  42501: permission denied for relation atest2
INSERT INTO atest1 SELECT 1, b FROM atest1; -- ok
INSERT 0 1
UPDATE atest1 SET a = 1 WHERE a = 2; -- ok
UPDATE 1
UPDATE atest2 SET col2 = NOT col2; -- fail
ERROR:  42501: permission denied for relation atest2
SELECT * FROM atest1 FOR UPDATE; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atest2 FOR UPDATE; -- fail
ERROR:  42501: permission denied for relation atest2
DELETE FROM atest2; -- fail
ERROR:  42501: permission denied for relation atest2
TRUNCATE atest2; -- fail
ERROR:  42501: permission denied for relation atest2
BEGIN;
BEGIN
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- fail
ERROR:  42501: permission denied for relation atest2
COMMIT;
ROLLBACK
COPY atest2 FROM stdin; -- fail
ERROR:  42501: permission denied for relation atest2
GRANT ALL ON atest1 TO PUBLIC; -- fail
WARNING:  01007: no privileges were granted for "atest1"
GRANT
-- checks in subquery, both ok
SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
 a | b 
---+---
(0 rows)

SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
 col1 | col2 
------+------
(0 rows)

SET SESSION AUTHORIZATION regressuser3;
SET
SELECT session_user, current_user;
 session_user | current_user 
--------------+--------------
 regressuser3 | regressuser3
(1 row)

SELECT * FROM atest1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atest2; -- fail
ERROR:  42501: permission denied for relation atest2
INSERT INTO atest1 VALUES (2, 'two'); -- fail
ERROR:  42501: permission denied for relation atest1
INSERT INTO atest2 VALUES ('foo', true); -- fail
ERROR:  42501: permission denied for relation atest2
INSERT INTO atest1 SELECT 1, b FROM atest1; -- fail
ERROR:  42501: permission denied for relation atest1
UPDATE atest1 SET a = 1 WHERE a = 2; -- fail
ERROR:  42501: permission denied for relation atest1
UPDATE atest2 SET col2 = NULL; -- ok
UPDATE 0
UPDATE atest2 SET col2 = NOT col2; -- fails; requires SELECT on atest2
ERROR:  42501: permission denied for relation atest2
UPDATE atest2 SET col2 = true FROM atest1 WHERE atest1.a = 5; -- ok
UPDATE 0
SELECT * FROM atest1 FOR UPDATE; -- fail
ERROR:  42501: permission denied for relation atest1
SELECT * FROM atest2 FOR UPDATE; -- fail
ERROR:  42501: permission denied for relation atest2
DELETE FROM atest2; -- fail
ERROR:  42501: permission denied for relation atest2
TRUNCATE atest2; -- fail
ERROR:  42501: permission denied for relation atest2
BEGIN;
BEGIN
LOCK atest2 IN ACCESS EXCLUSIVE MODE; -- ok
LOCK TABLE
COMMIT;
COMMIT
COPY atest2 FROM stdin; -- fail
ERROR:  42501: permission denied for relation atest2
-- checks in subquery, both fail
SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
ERROR:  42501: permission denied for relation atest2
SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
ERROR:  42501: permission denied for relation atest2
SET SESSION AUTHORIZATION regressuser4;
SET
COPY atest2 FROM stdin; -- ok
COPY 1
SELECT * FROM atest1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

-- test leaky-function protections in selfuncs
-- regressuser1 will own a table and provide a view for it.
SET SESSION AUTHORIZATION regressuser1;
SET
CREATE TABLE atest12 as
  SELECT x AS a, 10001 - x AS b FROM generate_series(1,10000) x;
SELECT 10000
CREATE INDEX ON atest12 (a);
CREATE INDEX
CREATE INDEX ON atest12 (abs(a));
CREATE INDEX
VACUUM ANALYZE atest12;
VACUUM
CREATE FUNCTION leak(integer,integer) RETURNS boolean
  AS $$begin return $1 < $2; end$$
  LANGUAGE plpgsql immutable;
CREATE FUNCTION
CREATE OPERATOR <<< (procedure = leak, leftarg = integer, rightarg = integer,
                     restrict = scalarltsel);
CREATE OPERATOR
-- view with leaky operator
CREATE VIEW atest12v AS
  SELECT * FROM atest12 WHERE b <<< 5;
CREATE VIEW
GRANT SELECT ON atest12v TO PUBLIC;
GRANT
-- This plan should use nestloop, knowing that few rows will be selected.
EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
                   QUERY PLAN                    
-------------------------------------------------
 Nested Loop
   ->  Seq Scan on atest12 atest12_1
         Filter: (b <<< 5)
   ->  Index Scan using atest12_a_idx on atest12
         Index Cond: (a = atest12_1.b)
         Filter: (b <<< 5)
(6 rows)

-- And this one.
EXPLAIN (COSTS OFF) SELECT * FROM atest12 x, atest12 y
  WHERE x.a = y.b and abs(y.a) <<< 5;
                    QUERY PLAN                     
---------------------------------------------------
 Nested Loop
   ->  Seq Scan on atest12 y
         Filter: (abs(a) <<< 5)
   ->  Index Scan using atest12_a_idx on atest12 x
         Index Cond: (a = y.b)
(5 rows)

-- Check if regressuser2 can break security.
SET SESSION AUTHORIZATION regressuser2;
SET
CREATE FUNCTION leak2(integer,integer) RETURNS boolean
  AS $$begin raise notice 'leak % %', $1, $2; return $1 > $2; end$$
  LANGUAGE plpgsql immutable;
CREATE FUNCTION
CREATE OPERATOR >>> (procedure = leak2, leftarg = integer, rightarg = integer,
                     restrict = scalargtsel);
CREATE OPERATOR
-- This should not show any "leak" notices before failing.
EXPLAIN (COSTS OFF) SELECT * FROM atest12 WHERE a >>> 0;
ERROR:  42501: permission denied for relation atest12
-- This plan should use hashjoin, as it will expect many rows to be selected.
EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
                QUERY PLAN                 
-------------------------------------------
 Hash Join
   Hash Cond: (atest12.a = atest12_1.b)
   ->  Seq Scan on atest12
         Filter: (b <<< 5)
   ->  Hash
         ->  Seq Scan on atest12 atest12_1
               Filter: (b <<< 5)
(7 rows)

-- Now regressuser1 grants sufficient access to regressuser2.
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT SELECT (a, b) ON atest12 TO PUBLIC;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
-- Now regressuser2 will also get a good row estimate.
EXPLAIN (COSTS OFF) SELECT * FROM atest12v x, atest12v y WHERE x.a = y.b;
                   QUERY PLAN                    
-------------------------------------------------
 Nested Loop
   ->  Seq Scan on atest12 atest12_1
         Filter: (b <<< 5)
   ->  Index Scan using atest12_a_idx on atest12
         Index Cond: (a = atest12_1.b)
         Filter: (b <<< 5)
(6 rows)

-- But not for this, due to lack of table-wide permissions needed
-- to make use of the expression index's statistics.
EXPLAIN (COSTS OFF) SELECT * FROM atest12 x, atest12 y
  WHERE x.a = y.b and abs(y.a) <<< 5;
              QUERY PLAN              
--------------------------------------
 Hash Join
   Hash Cond: (x.a = y.b)
   ->  Seq Scan on atest12 x
   ->  Hash
         ->  Seq Scan on atest12 y
               Filter: (abs(a) <<< 5)
(6 rows)

-- clean up (regressuser1's objects are all dropped later)
DROP FUNCTION leak2(integer, integer) CASCADE;
NOTICE:  drop cascades to operator >>>(integer,integer)
DROP FUNCTION
-- groups
SET SESSION AUTHORIZATION regressuser3;
SET
CREATE TABLE atest3 (one int, two int, three int);
CREATE TABLE
GRANT DELETE ON atest3 TO GROUP regressgroup2;
GRANT
SET SESSION AUTHORIZATION regressuser1;
SET
SELECT * FROM atest3; -- fail
ERROR:  42501: permission denied for relation atest3
DELETE FROM atest3; -- ok
DELETE 0
-- views
SET SESSION AUTHORIZATION regressuser3;
SET
CREATE VIEW atestv1 AS SELECT * FROM atest1; -- ok
CREATE VIEW
/* The next *should* fail, but it's not implemented that way yet. */
CREATE VIEW atestv2 AS SELECT * FROM atest2;
CREATE VIEW
CREATE VIEW atestv3 AS SELECT * FROM atest3; -- ok
CREATE VIEW
/* Empty view is a corner case that failed in 9.2. */
CREATE VIEW atestv0 AS SELECT 0 as x WHERE false; -- ok
CREATE VIEW
SELECT * FROM atestv1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atestv2; -- fail
ERROR:  42501: permission denied for relation atest2
GRANT SELECT ON atestv1, atestv3 TO regressuser4;
GRANT
GRANT SELECT ON atestv2 TO regressuser2;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT * FROM atestv1; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT * FROM atestv2; -- fail
ERROR:  42501: permission denied for relation atestv2
SELECT * FROM atestv3; -- ok
 one | two | three 
-----+-----+-------
(0 rows)

SELECT * FROM atestv0; -- fail
ERROR:  42501: permission denied for relation atestv0
-- Appendrels excluded by constraints failed to check permissions in 8.4-9.2.
select * from
  ((select a.q1 as x from int8_tbl a offset 0)
   union all
   (select b.q2 as x from int8_tbl b offset 0)) ss
where false;
ERROR:  42501: permission denied for relation int8_tbl
set constraint_exclusion = on;
SET
select * from
  ((select a.q1 as x, random() from int8_tbl a where q1 > 0)
   union all
   (select b.q2 as x, random() from int8_tbl b where q2 > 0)) ss
where x < 0;
ERROR:  42501: permission denied for relation int8_tbl
reset constraint_exclusion;
RESET
CREATE VIEW atestv4 AS SELECT * FROM atestv3; -- nested view
CREATE VIEW
SELECT * FROM atestv4; -- ok
 one | two | three 
-----+-----+-------
(0 rows)

GRANT SELECT ON atestv4 TO regressuser2;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
-- Two complex cases:
SELECT * FROM atestv3; -- fail
ERROR:  42501: permission denied for relation atestv3
SELECT * FROM atestv4; -- ok (even though regressuser2 cannot access underlying atestv3)
 one | two | three 
-----+-----+-------
(0 rows)

SELECT * FROM atest2; -- ok
 col1 | col2 
------+------
 bar  | t
(1 row)

SELECT * FROM atestv2; -- fail (even though regressuser2 can access underlying atest2)
ERROR:  42501: permission denied for relation atest2
-- Test column level permissions
SET SESSION AUTHORIZATION regressuser1;
SET
CREATE TABLE atest5 (one int, two int unique, three int, four int unique);
CREATE TABLE
CREATE TABLE atest6 (one int, two int, blue int);
CREATE TABLE
GRANT SELECT (one), INSERT (two), UPDATE (three) ON atest5 TO regressuser4;
GRANT
GRANT ALL (one) ON atest5 TO regressuser3;
GRANT
INSERT INTO atest5 VALUES (1,2,3);
INSERT 0 1
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT * FROM atest5; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT one FROM atest5; -- ok
 one 
-----
   1
(1 row)

COPY atest5 (one) TO stdout; -- ok
1
SELECT two FROM atest5; -- fail
ERROR:  42501: permission denied for relation atest5
COPY atest5 (two) TO stdout; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT atest5 FROM atest5; -- fail
ERROR:  42501: permission denied for relation atest5
COPY atest5 (one,two) TO stdout; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT 1 FROM atest5; -- ok
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM atest5 a JOIN atest5 b USING (one); -- ok
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM atest5 a JOIN atest5 b USING (two); -- fail
ERROR:  42501: permission denied for relation atest5
SELECT 1 FROM atest5 a NATURAL JOIN atest5 b; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT (j.*) IS NULL FROM (atest5 a JOIN atest5 b USING (one)) j; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT 1 FROM atest5 WHERE two = 2; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT * FROM atest1, atest5; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT atest1.* FROM atest1, atest5; -- ok
 a |  b  
---+-----
 1 | two
 1 | two
(2 rows)

SELECT atest1.*,atest5.one FROM atest1, atest5; -- ok
 a |  b  | one 
---+-----+-----
 1 | two |   1
 1 | two |   1
(2 rows)

SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.two); -- fail
ERROR:  42501: permission denied for relation atest5
SELECT atest1.*,atest5.one FROM atest1 JOIN atest5 ON (atest1.a = atest5.one); -- ok
 a |  b  | one 
---+-----+-----
 1 | two |   1
 1 | two |   1
(2 rows)

SELECT one, two FROM atest5; -- fail
ERROR:  42501: permission denied for relation atest5
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT SELECT (one,two) ON atest6 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT one, two FROM atest5 NATURAL JOIN atest6; -- fail still
ERROR:  42501: permission denied for relation atest5
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT SELECT (two) ON atest5 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT one, two FROM atest5 NATURAL JOIN atest6; -- ok now
 one | two 
-----+-----
(0 rows)

-- test column-level privileges for INSERT and UPDATE
INSERT INTO atest5 (two) VALUES (3); -- ok
INSERT 0 1
COPY atest5 FROM stdin; -- fail
ERROR:  42501: permission denied for relation atest5
COPY atest5 (two) FROM stdin; -- ok
COPY 1
INSERT INTO atest5 (three) VALUES (4); -- fail
ERROR:  42501: permission denied for relation atest5
INSERT INTO atest5 VALUES (5,5,5); -- fail
ERROR:  42501: permission denied for relation atest5
UPDATE atest5 SET three = 10; -- ok
UPDATE 3
UPDATE atest5 SET one = 8; -- fail
ERROR:  42501: permission denied for relation atest5
UPDATE atest5 SET three = 5, one = 2; -- fail
ERROR:  42501: permission denied for relation atest5
-- Check that column level privs are enforced in RETURNING
-- Ok.
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10;
INSERT 0 1
-- Error. No SELECT on column three.
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10 RETURNING atest5.three;
ERROR:  42501: permission denied for relation atest5
-- Ok.  May SELECT on column "one":
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = 10 RETURNING atest5.one;
 one 
-----
    
(1 row)

INSERT 0 1
-- Check that column level privileges are enforced for EXCLUDED
-- Ok. we may select one
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = EXCLUDED.one;
INSERT 0 1
-- Error. No select rights on three
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set three = EXCLUDED.three;
ERROR:  42501: permission denied for relation atest5
INSERT INTO atest5(two) VALUES (6) ON CONFLICT (two) DO UPDATE set one = 8; -- fails (due to UPDATE)
ERROR:  42501: permission denied for relation atest5
INSERT INTO atest5(three) VALUES (4) ON CONFLICT (two) DO UPDATE set three = 10; -- fails (due to INSERT)
ERROR:  42501: permission denied for relation atest5
-- Check that the columns in the inference require select privileges
INSERT INTO atest5(four) VALUES (4); -- fail
ERROR:  42501: permission denied for relation atest5
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT INSERT (four) ON atest5 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
INSERT INTO atest5(four) VALUES (4) ON CONFLICT (four) DO UPDATE set three = 3; -- fails (due to SELECT)
ERROR:  42501: permission denied for relation atest5
INSERT INTO atest5(four) VALUES (4) ON CONFLICT ON CONSTRAINT atest5_four_key DO UPDATE set three = 3; -- fails (due to SELECT)
ERROR:  42501: permission denied for relation atest5
INSERT INTO atest5(four) VALUES (4); -- ok
INSERT 0 1
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT SELECT (four) ON atest5 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
INSERT INTO atest5(four) VALUES (4) ON CONFLICT (four) DO UPDATE set three = 3; -- ok
INSERT 0 1
INSERT INTO atest5(four) VALUES (4) ON CONFLICT ON CONSTRAINT atest5_four_key DO UPDATE set three = 3; -- ok
INSERT 0 1
SET SESSION AUTHORIZATION regressuser1;
SET
REVOKE ALL (one) ON atest5 FROM regressuser4;
REVOKE
GRANT SELECT (one,two,blue) ON atest6 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT one FROM atest5; -- fail
ERROR:  42501: permission denied for relation atest5
UPDATE atest5 SET one = 1; -- fail
ERROR:  42501: permission denied for relation atest5
SELECT atest6 FROM atest6; -- ok
 atest6 
--------
(0 rows)

COPY atest6 TO stdout; -- ok
-- check error reporting with column privs
SET SESSION AUTHORIZATION regressuser1;
SET
CREATE TABLE t1 (c1 int, c2 int, c3 int check (c3 < 5), primary key (c1, c2));
CREATE TABLE
GRANT SELECT (c1) ON t1 TO regressuser2;
GRANT
GRANT INSERT (c1, c2, c3) ON t1 TO regressuser2;
GRANT
GRANT UPDATE (c1, c2, c3) ON t1 TO regressuser2;
GRANT
-- seed data
INSERT INTO t1 VALUES (1, 1, 1);
INSERT 0 1
INSERT INTO t1 VALUES (1, 2, 1);
INSERT 0 1
INSERT INTO t1 VALUES (2, 1, 2);
INSERT 0 1
INSERT INTO t1 VALUES (2, 2, 2);
INSERT 0 1
INSERT INTO t1 VALUES (3, 1, 3);
INSERT 0 1
SET SESSION AUTHORIZATION regressuser2;
SET
INSERT INTO t1 (c1, c2) VALUES (1, 1); -- fail, but row not shown
ERROR:  23505: duplicate key value violates unique constraint "t1_pkey"
UPDATE t1 SET c2 = 1; -- fail, but row not shown
ERROR:  23505: duplicate key value violates unique constraint "t1_pkey"
INSERT INTO t1 (c1, c2) VALUES (null, null); -- fail, but see columns being inserted
ERROR:  23502: null value in column "c1" violates not-null constraint
DETAIL:  Failing row contains (c1, c2) = (null, null).
INSERT INTO t1 (c3) VALUES (null); -- fail, but see columns being inserted or have SELECT
ERROR:  23502: null value in column "c1" violates not-null constraint
DETAIL:  Failing row contains (c1, c3) = (null, null).
INSERT INTO t1 (c1) VALUES (5); -- fail, but see columns being inserted or have SELECT
ERROR:  23502: null value in column "c2" violates not-null constraint
DETAIL:  Failing row contains (c1) = (5).
UPDATE t1 SET c3 = 10; -- fail, but see columns with SELECT rights, or being modified
ERROR:  23514: new row for relation "t1" violates check constraint "t1_c3_check"
DETAIL:  Failing row contains (c1, c3) = (1, 10).
SET SESSION AUTHORIZATION regressuser1;
SET
DROP TABLE t1;
DROP TABLE
-- test column-level privileges when involved with DELETE
SET SESSION AUTHORIZATION regressuser1;
SET
ALTER TABLE atest6 ADD COLUMN three integer;
ALTER TABLE
GRANT DELETE ON atest5 TO regressuser3;
GRANT
GRANT SELECT (two) ON atest5 TO regressuser3;
GRANT
REVOKE ALL (one) ON atest5 FROM regressuser3;
REVOKE
GRANT SELECT (one) ON atest5 TO regressuser4;
GRANT
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT atest6 FROM atest6; -- fail
ERROR:  42501: permission denied for relation atest6
SELECT one FROM atest5 NATURAL JOIN atest6; -- fail
ERROR:  42501: permission denied for relation atest5
SET SESSION AUTHORIZATION regressuser1;
SET
ALTER TABLE atest6 DROP COLUMN three;
ALTER TABLE
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT atest6 FROM atest6; -- ok
 atest6 
--------
(0 rows)

SELECT one FROM atest5 NATURAL JOIN atest6; -- ok
 one 
-----
(0 rows)

SET SESSION AUTHORIZATION regressuser1;
SET
ALTER TABLE atest6 DROP COLUMN two;
ALTER TABLE
REVOKE SELECT (one,blue) ON atest6 FROM regressuser4;
REVOKE
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT * FROM atest6; -- fail
ERROR:  42501: permission denied for relation atest6
SELECT 1 FROM atest6; -- fail
ERROR:  42501: permission denied for relation atest6
SET SESSION AUTHORIZATION regressuser3;
SET
DELETE FROM atest5 WHERE one = 1; -- fail
ERROR:  42501: permission denied for relation atest5
DELETE FROM atest5 WHERE two = 2; -- ok
DELETE 1
-- check inheritance cases
SET SESSION AUTHORIZATION regressuser1;
SET
CREATE TABLE atestp1 (f1 int, f2 int) WITH OIDS;
CREATE TABLE
CREATE TABLE atestp2 (fx int, fy int) WITH OIDS;
CREATE TABLE
CREATE TABLE atestc (fz int) INHERITS (atestp1, atestp2);
CREATE TABLE
GRANT SELECT(fx,fy,oid) ON atestp2 TO regressuser2;
GRANT
GRANT SELECT(fx) ON atestc TO regressuser2;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT fx FROM atestp2; -- ok
 fx 
----
(0 rows)

SELECT fy FROM atestp2; -- ok
 fy 
----
(0 rows)

SELECT atestp2 FROM atestp2; -- ok
 atestp2 
---------
(0 rows)

SELECT oid FROM atestp2; -- ok
 oid 
-----
(0 rows)

SELECT fy FROM atestc; -- fail
ERROR:  42501: permission denied for relation atestc
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT SELECT(fy,oid) ON atestc TO regressuser2;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT fx FROM atestp2; -- still ok
 fx 
----
(0 rows)

SELECT fy FROM atestp2; -- ok
 fy 
----
(0 rows)

SELECT atestp2 FROM atestp2; -- ok
 atestp2 
---------
(0 rows)

SELECT oid FROM atestp2; -- ok
 oid 
-----
(0 rows)

-- privileges on functions, languages
-- switch to superuser
\c -
You are now connected to database "highgo" as user "highgo".
REVOKE ALL PRIVILEGES ON LANGUAGE sql FROM PUBLIC;
REVOKE
GRANT USAGE ON LANGUAGE sql TO regressuser1; -- ok
GRANT
GRANT USAGE ON LANGUAGE c TO PUBLIC; -- fail
ERROR:  42809: language "c" is not trusted
HINT:  Only superusers can use untrusted languages.
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT USAGE ON LANGUAGE sql TO regressuser2; -- fail
WARNING:  01007: no privileges were granted for "sql"
GRANT
CREATE FUNCTION testfunc1(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql;
CREATE FUNCTION
CREATE FUNCTION testfunc2(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
CREATE FUNCTION
REVOKE ALL ON FUNCTION testfunc1(int), testfunc2(int) FROM PUBLIC;
REVOKE
GRANT EXECUTE ON FUNCTION testfunc1(int), testfunc2(int) TO regressuser2;
GRANT
GRANT USAGE ON FUNCTION testfunc1(int) TO regressuser3; -- semantic error
ERROR:  0LP01: invalid privilege type USAGE for function
GRANT ALL PRIVILEGES ON FUNCTION testfunc1(int) TO regressuser4;
GRANT
GRANT ALL PRIVILEGES ON FUNCTION testfunc_nosuch(int) TO regressuser4;
ERROR:  42883: function testfunc_nosuch(integer) does not exist
CREATE FUNCTION testfunc4(boolean) RETURNS text
  AS 'select col1 from atest2 where col2 = $1;'
  LANGUAGE sql SECURITY DEFINER;
CREATE FUNCTION
GRANT EXECUTE ON FUNCTION testfunc4(boolean) TO regressuser3;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT testfunc1(5), testfunc2(5); -- ok
 testfunc1 | testfunc2 
-----------+-----------
        10 |        15
(1 row)

CREATE FUNCTION testfunc3(int) RETURNS int AS 'select 2 * $1;' LANGUAGE sql; -- fail
ERROR:  42501: permission denied for language sql
SET SESSION AUTHORIZATION regressuser3;
SET
SELECT testfunc1(5); -- fail
ERROR:  42501: permission denied for function testfunc1
SELECT col1 FROM atest2 WHERE col2 = true; -- fail
ERROR:  42501: permission denied for relation atest2
SELECT testfunc4(true); -- ok
 testfunc4 
-----------
 bar
(1 row)

SET SESSION AUTHORIZATION regressuser4;
SET
SELECT testfunc1(5); -- ok
 testfunc1 
-----------
        10
(1 row)

DROP FUNCTION testfunc1(int); -- fail
ERROR:  42501: must be owner of function testfunc1
\c -
You are now connected to database "highgo" as user "highgo".
DROP FUNCTION testfunc1(int); -- ok
DROP FUNCTION
-- restore to sanity
GRANT ALL PRIVILEGES ON LANGUAGE sql TO PUBLIC;
GRANT
-- privileges on types
-- switch to superuser
\c -
You are now connected to database "highgo" as user "highgo".
CREATE TYPE testtype1 AS (a int, b text);
CREATE TYPE
REVOKE USAGE ON TYPE testtype1 FROM PUBLIC;
REVOKE
GRANT USAGE ON TYPE testtype1 TO regressuser2;
GRANT
GRANT USAGE ON TYPE _testtype1 TO regressuser2; -- fail
ERROR:  0LP01: cannot set privileges of array types
HINT:  Set the privileges of the element type instead.
GRANT USAGE ON DOMAIN testtype1 TO regressuser2; -- fail
ERROR:  42809: "testtype1" is not a domain
CREATE DOMAIN testdomain1 AS int;
CREATE DOMAIN
REVOKE USAGE on DOMAIN testdomain1 FROM PUBLIC;
REVOKE
GRANT USAGE ON DOMAIN testdomain1 TO regressuser2;
GRANT
GRANT USAGE ON TYPE testdomain1 TO regressuser2; -- ok
GRANT
SET SESSION AUTHORIZATION regressuser1;
SET
-- commands that should fail
CREATE AGGREGATE testagg1a(testdomain1) (sfunc = int4_sum, stype = bigint);
ERROR:  42501: permission denied for type testdomain1
CREATE DOMAIN testdomain2a AS testdomain1;
ERROR:  42501: permission denied for type testdomain1
CREATE DOMAIN testdomain3a AS int;
CREATE DOMAIN
CREATE FUNCTION castfunc(int) RETURNS testdomain3a AS $$ SELECT $1::testdomain3a $$ LANGUAGE SQL;
CREATE FUNCTION
CREATE CAST (testdomain1 AS testdomain3a) WITH FUNCTION castfunc(int);
ERROR:  42501: permission denied for type testdomain1
DROP FUNCTION castfunc(int) CASCADE;
DROP FUNCTION
DROP DOMAIN testdomain3a;
DROP DOMAIN
CREATE FUNCTION testfunc5a(a testdomain1) RETURNS int LANGUAGE SQL AS $$ SELECT $1 $$;
ERROR:  42501: permission denied for type testdomain1
CREATE FUNCTION testfunc6a(b int) RETURNS testdomain1 LANGUAGE SQL AS $$ SELECT $1::testdomain1 $$;
ERROR:  42501: permission denied for type testdomain1
CREATE OPERATOR !+! (PROCEDURE = int4pl, LEFTARG = testdomain1, RIGHTARG = testdomain1);
ERROR:  42501: permission denied for type testdomain1
CREATE TABLE test5a (a int, b testdomain1);
ERROR:  42501: permission denied for type testdomain1
CREATE TABLE test6a OF testtype1;
ERROR:  42501: permission denied for type testtype1
CREATE TABLE test10a (a int[], b testtype1[]);
ERROR:  42501: permission denied for type testtype1
CREATE TABLE test9a (a int, b int);
CREATE TABLE
ALTER TABLE test9a ADD COLUMN c testdomain1;
ERROR:  42501: permission denied for type testdomain1
ALTER TABLE test9a ALTER COLUMN b TYPE testdomain1;
ERROR:  42501: permission denied for type testdomain1
CREATE TYPE test7a AS (a int, b testdomain1);
ERROR:  42501: permission denied for type testdomain1
CREATE TYPE test8a AS (a int, b int);
CREATE TYPE
ALTER TYPE test8a ADD ATTRIBUTE c testdomain1;
ERROR:  42501: permission denied for type testdomain1
ALTER TYPE test8a ALTER ATTRIBUTE b TYPE testdomain1;
ERROR:  42501: permission denied for type testdomain1
CREATE TABLE test11a AS (SELECT 1::testdomain1 AS a);
ERROR:  42501: permission denied for type testdomain1
REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
ERROR:  42501: permission denied for type testtype1
SET SESSION AUTHORIZATION regressuser2;
SET
-- commands that should succeed
CREATE AGGREGATE testagg1b(testdomain1) (sfunc = int4_sum, stype = bigint);
CREATE AGGREGATE
CREATE DOMAIN testdomain2b AS testdomain1;
CREATE DOMAIN
CREATE DOMAIN testdomain3b AS int;
CREATE DOMAIN
CREATE FUNCTION castfunc(int) RETURNS testdomain3b AS $$ SELECT $1::testdomain3b $$ LANGUAGE SQL;
CREATE FUNCTION
CREATE CAST (testdomain1 AS testdomain3b) WITH FUNCTION castfunc(int);
WARNING:  42809: cast will be ignored because the source data type is a domain
CREATE CAST
CREATE FUNCTION testfunc5b(a testdomain1) RETURNS int LANGUAGE SQL AS $$ SELECT $1 $$;
CREATE FUNCTION
CREATE FUNCTION testfunc6b(b int) RETURNS testdomain1 LANGUAGE SQL AS $$ SELECT $1::testdomain1 $$;
CREATE FUNCTION
CREATE OPERATOR !! (PROCEDURE = testfunc5b, RIGHTARG = testdomain1);
CREATE OPERATOR
CREATE TABLE test5b (a int, b testdomain1);
CREATE TABLE
CREATE TABLE test6b OF testtype1;
CREATE TABLE
CREATE TABLE test10b (a int[], b testtype1[]);
CREATE TABLE
CREATE TABLE test9b (a int, b int);
CREATE TABLE
ALTER TABLE test9b ADD COLUMN c testdomain1;
ALTER TABLE
ALTER TABLE test9b ALTER COLUMN b TYPE testdomain1;
ALTER TABLE
CREATE TYPE test7b AS (a int, b testdomain1);
CREATE TYPE
CREATE TYPE test8b AS (a int, b int);
CREATE TYPE
ALTER TYPE test8b ADD ATTRIBUTE c testdomain1;
ALTER TYPE
ALTER TYPE test8b ALTER ATTRIBUTE b TYPE testdomain1;
ALTER TYPE
CREATE TABLE test11b AS (SELECT 1::testdomain1 AS a);
SELECT 1
REVOKE ALL ON TYPE testtype1 FROM PUBLIC;
WARNING:  01006: no privileges could be revoked for "testtype1"
REVOKE
\c -
You are now connected to database "highgo" as user "highgo".
DROP AGGREGATE testagg1b(testdomain1);
DROP AGGREGATE
DROP DOMAIN testdomain2b;
DROP DOMAIN
DROP OPERATOR !! (NONE, testdomain1);
DROP OPERATOR
DROP FUNCTION testfunc5b(a testdomain1);
DROP FUNCTION
DROP FUNCTION testfunc6b(b int);
DROP FUNCTION
DROP TABLE test5b;
DROP TABLE
DROP TABLE test6b;
DROP TABLE
DROP TABLE test9b;
DROP TABLE
DROP TABLE test10b;
DROP TABLE
DROP TYPE test7b;
DROP TYPE
DROP TYPE test8b;
DROP TYPE
DROP CAST (testdomain1 AS testdomain3b);
DROP CAST
DROP FUNCTION castfunc(int) CASCADE;
DROP FUNCTION
DROP DOMAIN testdomain3b;
DROP DOMAIN
DROP TABLE test11b;
DROP TABLE
DROP TYPE testtype1; -- ok
DROP TYPE
DROP DOMAIN testdomain1; -- ok
DROP DOMAIN
-- truncate
SET SESSION AUTHORIZATION regressuser5;
SET
TRUNCATE atest2; -- ok
TRUNCATE TABLE
TRUNCATE atest3; -- fail
ERROR:  42501: permission denied for relation atest3
-- has_table_privilege function
-- bad-input checks
select has_table_privilege(NULL,'pg_authid','select');
 has_table_privilege 
---------------------
 
(1 row)

select has_table_privilege('pg_shad','select');
ERROR:  42P01: relation "pg_shad" does not exist
select has_table_privilege('nosuchuser','pg_authid','select');
ERROR:  42704: role "nosuchuser" does not exist
select has_table_privilege('pg_authid','sel');
ERROR:  22023: unrecognized privilege type: "sel"
select has_table_privilege(-999999,'pg_authid','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(1,'select');
 has_table_privilege 
---------------------
 
(1 row)

-- superuser
\c -
You are now connected to database "highgo" as user "highgo".
select has_table_privilege(current_user,'pg_authid','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'pg_authid','insert');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,'pg_authid','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,'pg_authid','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

-- 'rule' privilege no longer exists, but for backwards compatibility
-- has_table_privilege still recognizes the keyword and says FALSE
select has_table_privilege(current_user,t1.oid,'rule')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'pg_authid') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'pg_authid') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','update');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','delete');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege('pg_authid','truncate');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'pg_authid') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

-- non-superuser
SET SESSION AUTHORIZATION regressuser3;
SET
select has_table_privilege(current_user,'pg_class','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'pg_class','insert');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'pg_class','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'pg_class','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'pg_class') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'pg_class') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','delete');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('pg_class','truncate');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'pg_class') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,'atest1','select');
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(current_user,'atest1','insert');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'atest1','update')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,'atest1','delete')
from (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(current_user,t1.oid,'references')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t2.oid,t1.oid,'select')
from (select oid from pg_class where relname = 'atest1') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t2.oid,t1.oid,'insert')
from (select oid from pg_class where relname = 'atest1') as t1,
  (select oid from pg_roles where rolname = current_user) as t2;
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','update');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','delete');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege('atest1','truncate');
 has_table_privilege 
---------------------
 f
(1 row)

select has_table_privilege(t1.oid,'select')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 t
(1 row)

select has_table_privilege(t1.oid,'trigger')
from (select oid from pg_class where relname = 'atest1') as t1;
 has_table_privilege 
---------------------
 f
(1 row)

-- Grant options
SET SESSION AUTHORIZATION regressuser1;
SET
CREATE TABLE atest4 (a int);
CREATE TABLE
GRANT SELECT ON atest4 TO regressuser2 WITH GRANT OPTION;
GRANT
GRANT UPDATE ON atest4 TO regressuser2;
GRANT
GRANT SELECT ON atest4 TO GROUP regressgroup1 WITH GRANT OPTION;
GRANT
SET SESSION AUTHORIZATION regressuser2;
SET
GRANT SELECT ON atest4 TO regressuser3;
GRANT
GRANT UPDATE ON atest4 TO regressuser3; -- fail
WARNING:  01007: no privileges were granted for "atest4"
GRANT
SET SESSION AUTHORIZATION regressuser1;
SET
REVOKE SELECT ON atest4 FROM regressuser3; -- does nothing
REVOKE
SELECT has_table_privilege('regressuser3', 'atest4', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

REVOKE SELECT ON atest4 FROM regressuser2; -- fail
ERROR:  2BP01: dependent privileges exist
HINT:  Use CASCADE to revoke them too.
REVOKE GRANT OPTION FOR SELECT ON atest4 FROM regressuser2 CASCADE; -- ok
REVOKE
SELECT has_table_privilege('regressuser2', 'atest4', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regressuser3', 'atest4', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regressuser1', 'atest4', 'SELECT WITH GRANT OPTION'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

-- Admin options
SET SESSION AUTHORIZATION regressuser4;
SET
CREATE FUNCTION dogrant_ok() RETURNS void LANGUAGE sql SECURITY DEFINER AS
	'GRANT regressgroup2 TO regressuser5';
CREATE FUNCTION
GRANT regressgroup2 TO regressuser5; -- ok: had ADMIN OPTION
GRANT ROLE
SET ROLE regressgroup2;
SET
GRANT regressgroup2 TO regressuser5; -- fails: SET ROLE suspended privilege
ERROR:  42501: must have admin option on role "regressgroup2"
SET SESSION AUTHORIZATION regressuser1;
SET
GRANT regressgroup2 TO regressuser5; -- fails: no ADMIN OPTION
ERROR:  42501: must have admin option on role "regressgroup2"
SELECT dogrant_ok();			-- ok: SECURITY DEFINER conveys ADMIN
NOTICE:  role "regressuser5" is already a member of role "regressgroup2"
CONTEXT:  SQL function "dogrant_ok" statement 1
 dogrant_ok 
------------
 
(1 row)

SET ROLE regressgroup2;
SET
GRANT regressgroup2 TO regressuser5; -- fails: SET ROLE did not help
ERROR:  42501: must have admin option on role "regressgroup2"
SET SESSION AUTHORIZATION regressgroup2;
SET
GRANT regressgroup2 TO regressuser5; -- ok: a role can self-admin
NOTICE:  role "regressuser5" is already a member of role "regressgroup2"
GRANT ROLE
CREATE FUNCTION dogrant_fails() RETURNS void LANGUAGE sql SECURITY DEFINER AS
	'GRANT regressgroup2 TO regressuser5';
CREATE FUNCTION
SELECT dogrant_fails();			-- fails: no self-admin in SECURITY DEFINER
ERROR:  42501: must have admin option on role "regressgroup2"
CONTEXT:  SQL function "dogrant_fails" statement 1
DROP FUNCTION dogrant_fails();
DROP FUNCTION
SET SESSION AUTHORIZATION regressuser4;
SET
DROP FUNCTION dogrant_ok();
DROP FUNCTION
REVOKE regressgroup2 FROM regressuser5;
REVOKE ROLE
-- has_sequence_privilege tests
\c -
You are now connected to database "highgo" as user "highgo".
CREATE SEQUENCE x_seq;
CREATE SEQUENCE
GRANT USAGE on x_seq to regressuser2;
GRANT
SELECT has_sequence_privilege('regressuser1', 'atest1', 'SELECT');
ERROR:  42809: "atest1" is not a sequence
SELECT has_sequence_privilege('regressuser1', 'x_seq', 'INSERT');
ERROR:  22023: unrecognized privilege type: "INSERT"
SELECT has_sequence_privilege('regressuser1', 'x_seq', 'SELECT');
 has_sequence_privilege 
------------------------
 f
(1 row)

SET SESSION AUTHORIZATION regressuser2;
SET
SELECT has_sequence_privilege('x_seq', 'USAGE');
 has_sequence_privilege 
------------------------
 t
(1 row)

-- largeobject privilege tests
\c -
You are now connected to database "highgo" as user "highgo".
SET SESSION AUTHORIZATION regressuser1;
SET
SELECT lo_create(1001);
 lo_create 
-----------
      1001
(1 row)

SELECT lo_create(1002);
 lo_create 
-----------
      1002
(1 row)

SELECT lo_create(1003);
 lo_create 
-----------
      1003
(1 row)

SELECT lo_create(1004);
 lo_create 
-----------
      1004
(1 row)

SELECT lo_create(1005);
 lo_create 
-----------
      1005
(1 row)

GRANT ALL ON LARGE OBJECT 1001 TO PUBLIC;
GRANT
GRANT SELECT ON LARGE OBJECT 1003 TO regressuser2;
GRANT
GRANT SELECT,UPDATE ON LARGE OBJECT 1004 TO regressuser2;
GRANT
GRANT ALL ON LARGE OBJECT 1005 TO regressuser2;
GRANT
GRANT SELECT ON LARGE OBJECT 1005 TO regressuser2 WITH GRANT OPTION;
GRANT
GRANT SELECT, INSERT ON LARGE OBJECT 1001 TO PUBLIC;	-- to be failed
ERROR:  0LP01: invalid privilege type INSERT for large object
GRANT SELECT, UPDATE ON LARGE OBJECT 1001 TO nosuchuser;	-- to be failed
ERROR:  42704: role "nosuchuser" does not exist
GRANT SELECT, UPDATE ON LARGE OBJECT  999 TO PUBLIC;	-- to be failed
ERROR:  42704: large object 999 does not exist
\c -
You are now connected to database "highgo" as user "highgo".
SET SESSION AUTHORIZATION regressuser2;
SET
SELECT lo_create(2001);
 lo_create 
-----------
      2001
(1 row)

SELECT lo_create(2002);
 lo_create 
-----------
      2002
(1 row)

SELECT loread(lo_open(1001, x'20000'::int), 32);	-- allowed, for now
 loread 
--------
 \x
(1 row)

SELECT lowrite(lo_open(1001, x'40000'::int), 'abcd');	-- fail, wrong mode
ERROR:  55000: large object descriptor 0 was not opened for writing
SELECT loread(lo_open(1001, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT loread(lo_open(1002, x'40000'::int), 32);	-- to be denied
ERROR:  42501: permission denied for large object 1002
SELECT loread(lo_open(1003, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT loread(lo_open(1004, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT lowrite(lo_open(1001, x'20000'::int), 'abcd');
 lowrite 
---------
       4
(1 row)

SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd');	-- to be denied
ERROR:  42501: permission denied for large object 1002
SELECT lowrite(lo_open(1003, x'20000'::int), 'abcd');	-- to be denied
ERROR:  42501: permission denied for large object 1003
SELECT lowrite(lo_open(1004, x'20000'::int), 'abcd');
 lowrite 
---------
       4
(1 row)

GRANT SELECT ON LARGE OBJECT 1005 TO regressuser3;
GRANT
GRANT UPDATE ON LARGE OBJECT 1006 TO regressuser3;	-- to be denied
ERROR:  42704: large object 1006 does not exist
REVOKE ALL ON LARGE OBJECT 2001, 2002 FROM PUBLIC;
REVOKE
GRANT ALL ON LARGE OBJECT 2001 TO regressuser3;
GRANT
SELECT lo_unlink(1001);		-- to be denied
ERROR:  42501: must be owner of large object 1001
SELECT lo_unlink(2002);
 lo_unlink 
-----------
         1
(1 row)

\c -
You are now connected to database "highgo" as user "highgo".
-- confirm ACL setting
SELECT oid, pg_get_userbyid(lomowner) ownername, lomacl FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
 oid  |  ownername   |                                          lomacl                                          
------+--------------+------------------------------------------------------------------------------------------
 1001 | regressuser1 | {regressuser1=rw/regressuser1,=rw/regressuser1}
 1002 | regressuser1 | 
 1003 | regressuser1 | {regressuser1=rw/regressuser1,regressuser2=r/regressuser1}
 1004 | regressuser1 | {regressuser1=rw/regressuser1,regressuser2=rw/regressuser1}
 1005 | regressuser1 | {regressuser1=rw/regressuser1,regressuser2=r*w/regressuser1,regressuser3=r/regressuser2}
 2001 | regressuser2 | {regressuser2=rw/regressuser2,regressuser3=rw/regressuser2}
(6 rows)

SET SESSION AUTHORIZATION regressuser3;
SET
SELECT loread(lo_open(1001, x'40000'::int), 32);
   loread   
------------
 \x61626364
(1 row)

SELECT loread(lo_open(1003, x'40000'::int), 32);	-- to be denied
ERROR:  42501: permission denied for large object 1003
SELECT loread(lo_open(1005, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT lo_truncate(lo_open(1005, x'20000'::int), 10);	-- to be denied
ERROR:  42501: permission denied for large object 1005
SELECT lo_truncate(lo_open(2001, x'20000'::int), 10);
 lo_truncate 
-------------
           0
(1 row)

-- compatibility mode in largeobject permission
\c -
You are now connected to database "highgo" as user "highgo".
SET lo_compat_privileges = false;	-- default setting
SET
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT loread(lo_open(1002, x'40000'::int), 32);	-- to be denied
ERROR:  42501: permission denied for large object 1002
SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd');	-- to be denied
ERROR:  42501: permission denied for large object 1002
SELECT lo_truncate(lo_open(1002, x'20000'::int), 10);	-- to be denied
ERROR:  42501: permission denied for large object 1002
SELECT lo_put(1002, 1, 'abcd');				-- to be denied
ERROR:  42501: permission denied for large object 1002
SELECT lo_unlink(1002);					-- to be denied
ERROR:  42501: must be owner of large object 1002
SELECT lo_export(1001, '/dev/null');			-- to be denied
ERROR:  42501: must be superuser to use server-side lo_export()
HINT:  Anyone can use the client-side lo_export() provided by libpq.
\c -
You are now connected to database "highgo" as user "highgo".
SET lo_compat_privileges = true;	-- compatibility mode
SET
SET SESSION AUTHORIZATION regressuser4;
SET
SELECT loread(lo_open(1002, x'40000'::int), 32);
 loread 
--------
 \x
(1 row)

SELECT lowrite(lo_open(1002, x'20000'::int), 'abcd');
 lowrite 
---------
       4
(1 row)

SELECT lo_truncate(lo_open(1002, x'20000'::int), 10);
 lo_truncate 
-------------
           0
(1 row)

SELECT lo_unlink(1002);
 lo_unlink 
-----------
         1
(1 row)

SELECT lo_export(1001, '/dev/null');			-- to be denied
ERROR:  42501: must be superuser to use server-side lo_export()
HINT:  Anyone can use the client-side lo_export() provided by libpq.
-- don't allow unpriv users to access pg_largeobject contents
\c -
You are now connected to database "highgo" as user "highgo".
SELECT * FROM pg_largeobject LIMIT 0;
 loid | pageno | data 
------+--------+------
(0 rows)

SET SESSION AUTHORIZATION regressuser1;
SET
SELECT * FROM pg_largeobject LIMIT 0;			-- to be denied
ERROR:  42501: permission denied for relation pg_largeobject
-- test default ACLs
\c -
You are now connected to database "highgo" as user "highgo".
CREATE SCHEMA testns;
CREATE SCHEMA
GRANT ALL ON SCHEMA testns TO regressuser1;
GRANT
CREATE TABLE testns.acltest1 (x int);
CREATE TABLE
SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'SELECT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT SELECT ON TABLES TO public;
ALTER DEFAULT PRIVILEGES
SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'SELECT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

DROP TABLE testns.acltest1;
DROP TABLE
CREATE TABLE testns.acltest1 (x int);
CREATE TABLE
SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'SELECT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT INSERT ON TABLES TO regressuser1;
ALTER DEFAULT PRIVILEGES
DROP TABLE testns.acltest1;
DROP TABLE
CREATE TABLE testns.acltest1 (x int);
CREATE TABLE
SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'SELECT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'INSERT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns REVOKE INSERT ON TABLES FROM regressuser1;
ALTER DEFAULT PRIVILEGES
DROP TABLE testns.acltest1;
DROP TABLE
CREATE TABLE testns.acltest1 (x int);
CREATE TABLE
SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'SELECT'); -- yes
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.acltest1', 'INSERT'); -- no
 has_table_privilege 
---------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES FOR ROLE regressuser1 REVOKE EXECUTE ON FUNCTIONS FROM public;
ALTER DEFAULT PRIVILEGES
SET ROLE regressuser1;
SET
CREATE FUNCTION testns.foo() RETURNS int AS 'select 1' LANGUAGE sql;
CREATE FUNCTION
SELECT has_function_privilege('regressuser2', 'testns.foo()', 'EXECUTE'); -- no
 has_function_privilege 
------------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT EXECUTE ON FUNCTIONS to public;
ALTER DEFAULT PRIVILEGES
DROP FUNCTION testns.foo();
DROP FUNCTION
CREATE FUNCTION testns.foo() RETURNS int AS 'select 1' LANGUAGE sql;
CREATE FUNCTION
SELECT has_function_privilege('regressuser2', 'testns.foo()', 'EXECUTE'); -- yes
 has_function_privilege 
------------------------
 t
(1 row)

DROP FUNCTION testns.foo();
DROP FUNCTION
ALTER DEFAULT PRIVILEGES FOR ROLE regressuser1 REVOKE USAGE ON TYPES FROM public;
ALTER DEFAULT PRIVILEGES
CREATE DOMAIN testns.testdomain1 AS int;
CREATE DOMAIN
SELECT has_type_privilege('regressuser2', 'testns.testdomain1', 'USAGE'); -- no
 has_type_privilege 
--------------------
 f
(1 row)

ALTER DEFAULT PRIVILEGES IN SCHEMA testns GRANT USAGE ON TYPES to public;
ALTER DEFAULT PRIVILEGES
DROP DOMAIN testns.testdomain1;
DROP DOMAIN
CREATE DOMAIN testns.testdomain1 AS int;
CREATE DOMAIN
SELECT has_type_privilege('regressuser2', 'testns.testdomain1', 'USAGE'); -- yes
 has_type_privilege 
--------------------
 t
(1 row)

DROP DOMAIN testns.testdomain1;
DROP DOMAIN
RESET ROLE;
RESET
SELECT count(*)
  FROM pg_default_acl d LEFT JOIN pg_namespace n ON defaclnamespace = n.oid
  WHERE nspname = 'testns';
 count 
-------
     3
(1 row)

DROP SCHEMA testns CASCADE;
NOTICE:  drop cascades to table testns.acltest1
DROP SCHEMA
SELECT d.*     -- check that entries went away
  FROM pg_default_acl d LEFT JOIN pg_namespace n ON defaclnamespace = n.oid
  WHERE nspname IS NULL AND defaclnamespace != 0;
 defaclrole | defaclnamespace | defaclobjtype | defaclacl 
------------+-----------------+---------------+-----------
(0 rows)

-- Grant on all objects of given type in a schema
\c -
You are now connected to database "highgo" as user "highgo".
CREATE SCHEMA testns;
CREATE SCHEMA
CREATE TABLE testns.t1 (f1 int);
CREATE TABLE
CREATE TABLE testns.t2 (f1 int);
CREATE TABLE
SELECT has_table_privilege('regressuser1', 'testns.t1', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

GRANT ALL ON ALL TABLES IN SCHEMA testns TO regressuser1;
GRANT
SELECT has_table_privilege('regressuser1', 'testns.t1', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.t2', 'SELECT'); -- true
 has_table_privilege 
---------------------
 t
(1 row)

REVOKE ALL ON ALL TABLES IN SCHEMA testns FROM regressuser1;
REVOKE
SELECT has_table_privilege('regressuser1', 'testns.t1', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

SELECT has_table_privilege('regressuser1', 'testns.t2', 'SELECT'); -- false
 has_table_privilege 
---------------------
 f
(1 row)

CREATE FUNCTION testns.testfunc(int) RETURNS int AS 'select 3 * $1;' LANGUAGE sql;
CREATE FUNCTION
SELECT has_function_privilege('regressuser1', 'testns.testfunc(int)', 'EXECUTE'); -- true by default
 has_function_privilege 
------------------------
 t
(1 row)

REVOKE ALL ON ALL FUNCTIONS IN SCHEMA testns FROM PUBLIC;
REVOKE
SELECT has_function_privilege('regressuser1', 'testns.testfunc(int)', 'EXECUTE'); -- false
 has_function_privilege 
------------------------
 f
(1 row)

SET client_min_messages TO 'warning';
SET
DROP SCHEMA testns CASCADE;
DROP SCHEMA
RESET client_min_messages;
RESET
-- Change owner of the schema & and rename of new schema owner
\c -
You are now connected to database "highgo" as user "highgo".
CREATE ROLE schemauser1 superuser login;
CREATE ROLE
CREATE ROLE schemauser2 superuser login;
CREATE ROLE
SET SESSION ROLE schemauser1;
SET
CREATE SCHEMA testns;
CREATE SCHEMA
SELECT nspname, rolname FROM pg_namespace, pg_roles WHERE pg_namespace.nspname = 'testns' AND pg_namespace.nspowner = pg_roles.oid;
 nspname |   rolname   
---------+-------------
 testns  | schemauser1
(1 row)

ALTER SCHEMA testns OWNER TO schemauser2;
ALTER SCHEMA
ALTER ROLE schemauser2 RENAME TO schemauser_renamed;
ALTER ROLE
SELECT nspname, rolname FROM pg_namespace, pg_roles WHERE pg_namespace.nspname = 'testns' AND pg_namespace.nspowner = pg_roles.oid;
 nspname |      rolname       
---------+--------------------
 testns  | schemauser_renamed
(1 row)

set session role schemauser_renamed;
SET
SET client_min_messages TO 'warning';
SET
DROP SCHEMA testns CASCADE;
DROP SCHEMA
RESET client_min_messages;
RESET
-- clean up
\c -
You are now connected to database "highgo" as user "highgo".
DROP ROLE schemauser1;
DROP ROLE
DROP ROLE schemauser_renamed;
DROP ROLE
-- test that dependent privileges are revoked (or not) properly
\c -
You are now connected to database "highgo" as user "highgo".
set session role regressuser1;
SET
create table dep_priv_test (a int);
CREATE TABLE
grant select on dep_priv_test to regressuser2 with grant option;
GRANT
grant select on dep_priv_test to regressuser3 with grant option;
GRANT
set session role regressuser2;
SET
grant select on dep_priv_test to regressuser4 with grant option;
GRANT
set session role regressuser3;
SET
grant select on dep_priv_test to regressuser4 with grant option;
GRANT
set session role regressuser4;
SET
grant select on dep_priv_test to regressuser5;
GRANT
\dp dep_priv_test
                                         Access privileges
 Schema |     Name      | Type  |         Access privileges         | Column privileges | Policies 
--------+---------------+-------+-----------------------------------+-------------------+----------
 public | dep_priv_test | table | regressuser1=arwdDxt/regressuser1+|                   | 
        |               |       | regressuser2=r*/regressuser1     +|                   | 
        |               |       | regressuser3=r*/regressuser1     +|                   | 
        |               |       | regressuser4=r*/regressuser2     +|                   | 
        |               |       | regressuser4=r*/regressuser3     +|                   | 
        |               |       | regressuser5=r/regressuser4       |                   | 
(1 row)

set session role regressuser2;
SET
revoke select on dep_priv_test from regressuser4 cascade;
REVOKE
\dp dep_priv_test
                                         Access privileges
 Schema |     Name      | Type  |         Access privileges         | Column privileges | Policies 
--------+---------------+-------+-----------------------------------+-------------------+----------
 public | dep_priv_test | table | regressuser1=arwdDxt/regressuser1+|                   | 
        |               |       | regressuser2=r*/regressuser1     +|                   | 
        |               |       | regressuser3=r*/regressuser1     +|                   | 
        |               |       | regressuser4=r*/regressuser3     +|                   | 
        |               |       | regressuser5=r/regressuser4       |                   | 
(1 row)

set session role regressuser3;
SET
revoke select on dep_priv_test from regressuser4 cascade;
REVOKE
\dp dep_priv_test
                                         Access privileges
 Schema |     Name      | Type  |         Access privileges         | Column privileges | Policies 
--------+---------------+-------+-----------------------------------+-------------------+----------
 public | dep_priv_test | table | regressuser1=arwdDxt/regressuser1+|                   | 
        |               |       | regressuser2=r*/regressuser1     +|                   | 
        |               |       | regressuser3=r*/regressuser1      |                   | 
(1 row)

set session role regressuser1;
SET
drop table dep_priv_test;
DROP TABLE
-- clean up
\c
You are now connected to database "highgo" as user "highgo".
drop sequence x_seq;
DROP SEQUENCE
DROP FUNCTION testfunc2(int);
DROP FUNCTION
DROP FUNCTION testfunc4(boolean);
DROP FUNCTION
DROP VIEW atestv0;
DROP VIEW
DROP VIEW atestv1;
DROP VIEW
DROP VIEW atestv2;
DROP VIEW
-- this should cascade to drop atestv4
DROP VIEW atestv3 CASCADE;
NOTICE:  drop cascades to view atestv4
DROP VIEW
-- this should complain "does not exist"
DROP VIEW atestv4;
ERROR:  42P01: view "atestv4" does not exist
DROP TABLE atest1;
DROP TABLE
DROP TABLE atest2;
DROP TABLE
DROP TABLE atest3;
DROP TABLE
DROP TABLE atest4;
DROP TABLE
DROP TABLE atest5;
DROP TABLE
DROP TABLE atest6;
DROP TABLE
DROP TABLE atestc;
DROP TABLE
DROP TABLE atestp1;
DROP TABLE
DROP TABLE atestp2;
DROP TABLE
SELECT lo_unlink(oid) FROM pg_largeobject_metadata WHERE oid >= 1000 AND oid < 3000 ORDER BY oid;
 lo_unlink 
-----------
         1
         1
         1
         1
         1
(5 rows)

DROP GROUP regressgroup1;
DROP ROLE
DROP GROUP regressgroup2;
DROP ROLE
-- these are needed to clean up permissions
REVOKE USAGE ON LANGUAGE sql FROM regressuser1;
REVOKE
DROP OWNED BY regressuser1;
DROP OWNED
DROP USER regressuser1;
DROP ROLE
DROP USER regressuser2;
DROP ROLE
DROP USER regressuser3;
DROP ROLE
DROP USER regressuser4;
DROP ROLE
DROP USER regressuser5;
DROP ROLE
DROP USER regressuser6;
ERROR:  42704: role "regressuser6" does not exist
-- permissions with LOCK TABLE
CREATE USER locktable_user;
CREATE ROLE
CREATE TABLE lock_table (a int);
CREATE TABLE
-- LOCK TABLE and SELECT permission
GRANT SELECT ON lock_table TO locktable_user;
GRANT
SET SESSION AUTHORIZATION locktable_user;
SET
BEGIN;
BEGIN
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
\c
You are now connected to database "highgo" as user "highgo".
REVOKE SELECT ON lock_table FROM locktable_user;
REVOKE
-- LOCK TABLE and INSERT permission
GRANT INSERT ON lock_table TO locktable_user;
GRANT
SET SESSION AUTHORIZATION locktable_user;
SET
BEGIN;
BEGIN
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
\c
You are now connected to database "highgo" as user "highgo".
REVOKE INSERT ON lock_table FROM locktable_user;
REVOKE
-- LOCK TABLE and UPDATE permission
GRANT UPDATE ON lock_table TO locktable_user;
GRANT
SET SESSION AUTHORIZATION locktable_user;
SET
BEGIN;
BEGIN
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
\c
You are now connected to database "highgo" as user "highgo".
REVOKE UPDATE ON lock_table FROM locktable_user;
REVOKE
-- LOCK TABLE and DELETE permission
GRANT DELETE ON lock_table TO locktable_user;
GRANT
SET SESSION AUTHORIZATION locktable_user;
SET
BEGIN;
BEGIN
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
\c
You are now connected to database "highgo" as user "highgo".
REVOKE DELETE ON lock_table FROM locktable_user;
REVOKE
-- LOCK TABLE and TRUNCATE permission
GRANT TRUNCATE ON lock_table TO locktable_user;
GRANT
SET SESSION AUTHORIZATION locktable_user;
SET
BEGIN;
BEGIN
LOCK TABLE lock_table IN ROW EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS SHARE MODE; -- should fail
ERROR:  42501: permission denied for relation lock_table
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
LOCK TABLE lock_table IN ACCESS EXCLUSIVE MODE; -- should pass
LOCK TABLE
COMMIT;
COMMIT
\c
You are now connected to database "highgo" as user "highgo".
REVOKE TRUNCATE ON lock_table FROM locktable_user;
REVOKE
-- clean up
DROP TABLE lock_table;
DROP TABLE
DROP USER locktable_user;
DROP ROLE
