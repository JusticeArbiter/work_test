---
--- test creation of SERIAL column
---
CREATE TABLE serialTest (f1 text, f2 serial);
CREATE TABLE
INSERT INTO serialTest VALUES ('foo');
INSERT 0 1
INSERT INTO serialTest VALUES ('bar');
INSERT 0 1
INSERT INTO serialTest VALUES ('force', 100);
INSERT 0 1
INSERT INTO serialTest VALUES ('wrong', NULL);
ERROR:  23502: null value in column "f2" violates not-null constraint
DETAIL:  Failing row contains (wrong, null).
SELECT * FROM serialTest;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
(3 rows)

-- test smallserial / bigserial
CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
  f5 bigserial, f6 serial8);
CREATE TABLE
INSERT INTO serialTest2 (f1)
  VALUES ('test_defaults');
INSERT 0 1
INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
  VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
          9223372036854775807),
         ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
          -9223372036854775808);
INSERT 0 2
-- All these INSERTs should fail:
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', -32769);
ERROR:  22003: smallint out of range
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', -32769);
ERROR:  22003: smallint out of range
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', 32768);
ERROR:  22003: smallint out of range
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', 32768);
ERROR:  22003: smallint out of range
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', -9223372036854775809);
ERROR:  22003: bigint out of range
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', -9223372036854775809);
ERROR:  22003: bigint out of range
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', 9223372036854775808);
ERROR:  22003: bigint out of range
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', 9223372036854775808);
ERROR:  22003: bigint out of range
SELECT * FROM serialTest2 ORDER BY f2 ASC;
      f1       |     f2      |   f3   |   f4   |          f5          |          f6          
---------------+-------------+--------+--------+----------------------+----------------------
 test_min_vals | -2147483648 | -32768 | -32768 | -9223372036854775808 | -9223372036854775808
 test_defaults |           1 |      1 |      1 |                    1 |                    1
 test_max_vals |  2147483647 |  32767 |  32767 |  9223372036854775807 |  9223372036854775807
(3 rows)

SELECT nextval('serialTest2_f2_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f3_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f4_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f5_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f6_seq');
 nextval 
---------
       2
(1 row)

-- basic sequence operations using both text and oid references
CREATE SEQUENCE sequence_test;
CREATE SEQUENCE
CREATE SEQUENCE IF NOT EXISTS sequence_test;
NOTICE:  42P07: relation "sequence_test" already exists, skipping
CREATE SEQUENCE
SELECT nextval('sequence_test'::text);
 nextval 
---------
       1
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
       2
(1 row)

SELECT currval('sequence_test'::text);
 currval 
---------
       2
(1 row)

SELECT currval('sequence_test'::regclass);
 currval 
---------
       2
(1 row)

SELECT setval('sequence_test'::text, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::text, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      99
(1 row)

SELECT setval('sequence_test'::regclass, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::regclass, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      99
(1 row)

DISCARD SEQUENCES;
DISCARD SEQUENCES
SELECT currval('sequence_test'::regclass);
ERROR:  55000: currval of sequence "sequence_test" is not yet defined in this session
DROP SEQUENCE sequence_test;
DROP SEQUENCE
-- renaming sequences
CREATE SEQUENCE foo_seq;
CREATE SEQUENCE
ALTER TABLE foo_seq RENAME TO foo_seq_new;
ALTER TABLE
SELECT * FROM foo_seq_new;
 sequence_name | last_value | start_value | increment_by |      max_value      | min_value | cache_value | log_cnt | is_cycled | is_called 
---------------+------------+-------------+--------------+---------------------+-----------+-------------+---------+-----------+-----------
 foo_seq       |          1 |           1 |            1 | 9223372036854775807 |         1 |           1 |       0 | f         | f
(1 row)

SELECT nextval('foo_seq_new');
 nextval 
---------
       1
(1 row)

SELECT nextval('foo_seq_new');
 nextval 
---------
       2
(1 row)

SELECT * FROM foo_seq_new;
 sequence_name | last_value | start_value | increment_by |      max_value      | min_value | cache_value | log_cnt | is_cycled | is_called 
---------------+------------+-------------+--------------+---------------------+-----------+-------------+---------+-----------+-----------
 foo_seq       |          2 |           1 |            1 | 9223372036854775807 |         1 |           1 |      31 | f         | t
(1 row)

DROP SEQUENCE foo_seq_new;
DROP SEQUENCE
-- renaming serial sequences
ALTER TABLE serialtest_f2_seq RENAME TO serialtest_f2_foo;
ALTER TABLE
INSERT INTO serialTest VALUES ('more');
INSERT 0 1
SELECT * FROM serialTest;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
 more  |   3
(4 rows)

--
-- Check dependencies of serial and ordinary sequences
--
CREATE TEMP SEQUENCE myseq2;
CREATE SEQUENCE
CREATE TEMP SEQUENCE myseq3;
CREATE SEQUENCE
CREATE TEMP TABLE t1 (
  f1 serial,
  f2 int DEFAULT nextval('myseq2'),
  f3 int DEFAULT nextval('myseq3'::text)
);
CREATE TABLE
-- Both drops should fail, but with different error messages:
DROP SEQUENCE t1_f1_seq;
ERROR:  2BP01: cannot drop sequence t1_f1_seq because other objects depend on it
DETAIL:  default for table t1 column f1 depends on sequence t1_f1_seq
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP SEQUENCE myseq2;
ERROR:  2BP01: cannot drop sequence myseq2 because other objects depend on it
DETAIL:  default for table t1 column f2 depends on sequence myseq2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- This however will work:
DROP SEQUENCE myseq3;
DROP SEQUENCE
DROP TABLE t1;
DROP TABLE
-- Fails because no longer existent:
DROP SEQUENCE t1_f1_seq;
ERROR:  42P01: sequence "t1_f1_seq" does not exist
-- Now OK:
DROP SEQUENCE myseq2;
DROP SEQUENCE
--
-- Alter sequence
--
ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
NOTICE:  00000: relation "sequence_test2" does not exist, skipping
ALTER SEQUENCE
CREATE SEQUENCE sequence_test2 START WITH 32;
CREATE SEQUENCE
SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

ALTER SEQUENCE sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
ALTER SEQUENCE
SELECT nextval('sequence_test2');
 nextval 
---------
      24
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      28
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      36
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
       5
(1 row)

ALTER SEQUENCE sequence_test2 RESTART;
ALTER SEQUENCE
SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      36
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
       5
(1 row)

-- Information schema
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema |   sequence_name    | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option 
------------------+-----------------+--------------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 highgo           | public          | sequence_test2     | bigint    |                64 |                       2 |             0 | 32          | 5             | 36                  | 4         | YES
 highgo           | public          | serialtest2_f2_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 highgo           | public          | serialtest2_f3_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 highgo           | public          | serialtest2_f4_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 highgo           | public          | serialtest2_f5_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 highgo           | public          | serialtest2_f6_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
(6 rows)

-- Test comments
COMMENT ON SEQUENCE asdf IS 'won''t work';
ERROR:  42P01: relation "asdf" does not exist
COMMENT ON SEQUENCE sequence_test2 IS 'will work';
COMMENT
COMMENT ON SEQUENCE sequence_test2 IS NULL;
COMMENT
-- Test lastval()
CREATE SEQUENCE seq;
CREATE SEQUENCE
SELECT nextval('seq');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

SELECT setval('seq', 99);
 setval 
--------
     99
(1 row)

SELECT lastval();
 lastval 
---------
      99
(1 row)

DISCARD SEQUENCES;
DISCARD SEQUENCES
SELECT lastval();
ERROR:  55000: lastval is not yet defined in this session
CREATE SEQUENCE seq2;
CREATE SEQUENCE
SELECT nextval('seq2');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

DROP SEQUENCE seq2;
DROP SEQUENCE
-- should fail
SELECT lastval();
ERROR:  55000: lastval is not yet defined in this session
CREATE USER seq_user;
CREATE ROLE
-- privileges tests
-- nextval
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT SELECT ON seq3 TO seq_user;
GRANT
SELECT nextval('seq3');
ERROR:  42501: permission denied for sequence seq3
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT UPDATE ON seq3 TO seq_user;
GRANT
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT USAGE ON seq3 TO seq_user;
GRANT
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

ROLLBACK;
ROLLBACK
-- currval
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT SELECT ON seq3 TO seq_user;
GRANT
SELECT currval('seq3');
 currval 
---------
       1
(1 row)

ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT UPDATE ON seq3 TO seq_user;
GRANT
SELECT currval('seq3');
ERROR:  42501: permission denied for sequence seq3
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT USAGE ON seq3 TO seq_user;
GRANT
SELECT currval('seq3');
 currval 
---------
       1
(1 row)

ROLLBACK;
ROLLBACK
-- lastval
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT SELECT ON seq3 TO seq_user;
GRANT
SELECT lastval();
 lastval 
---------
       1
(1 row)

ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT UPDATE ON seq3 TO seq_user;
GRANT
SELECT lastval();
ERROR:  42501: permission denied for sequence seq3
ROLLBACK;
ROLLBACK
BEGIN;
BEGIN
SET LOCAL SESSION AUTHORIZATION seq_user;
SET
CREATE SEQUENCE seq3;
CREATE SEQUENCE
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
REVOKE
GRANT USAGE ON seq3 TO seq_user;
GRANT
SELECT lastval();
 lastval 
---------
       1
(1 row)

ROLLBACK;
ROLLBACK
-- Sequences should get wiped out as well:
DROP TABLE serialTest, serialTest2;
DROP TABLE
-- Make sure sequences are gone:
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema | sequence_name  | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value | maximum_value | increment | cycle_option 
------------------+-----------------+----------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------+-----------+--------------
 highgo           | public          | sequence_test2 | bigint    |                64 |                       2 |             0 | 32          | 5             | 36            | 4         | YES
(1 row)

DROP USER seq_user;
DROP ROLE
DROP SEQUENCE seq;
DROP SEQUENCE
