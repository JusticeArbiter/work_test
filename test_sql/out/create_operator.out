--
-- CREATE_OPERATOR
--
CREATE OPERATOR ## (
   leftarg = path,
   rightarg = path,
   procedure = path_inter,
   commutator = ##
);
CREATE OPERATOR
CREATE OPERATOR <% (
   leftarg = point,
   rightarg = widget,
   procedure = pt_in_widget,
   commutator = >% ,
   negator = >=%
);
ERROR:  42704: type "widget" does not exist
CREATE OPERATOR @#@ (
   rightarg = int8,		-- left unary
   procedure = numeric_fac
);
CREATE OPERATOR
CREATE OPERATOR #@# (
   leftarg = int8,		-- right unary
   procedure = numeric_fac
);
CREATE OPERATOR
CREATE OPERATOR #%# (
   leftarg = int8,		-- right unary
   procedure = numeric_fac
);
CREATE OPERATOR
-- Test comments
COMMENT ON OPERATOR ###### (int4, NONE) IS 'bad right unary';
ERROR:  42883: operator does not exist: integer ######
-- => is disallowed now
CREATE OPERATOR => (
   leftarg = int8,		-- right unary
   procedure = numeric_fac
);
ERROR:  42601: syntax error at or near "=>"
LINE 1: CREATE OPERATOR => (
                        ^
-- Should fail. CREATE OPERATOR requires USAGE on SCHEMA
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_rol_op1;
CREATE ROLE
CREATE SCHEMA schema_op1;
CREATE SCHEMA
GRANT USAGE ON SCHEMA schema_op1 TO PUBLIC;
GRANT
REVOKE USAGE ON SCHEMA schema_op1 FROM regress_rol_op1;
REVOKE
SET ROLE regress_rol_op1;
SET
CREATE OPERATOR schema_op1.#*# (
   leftarg = int8,		-- right unary
   procedure = numeric_fac
);
ERROR:  42501: permission denied for schema schema_op1
ROLLBACK;
ROLLBACK
-- Should fail. SETOF type functions not allowed as argument (testing leftarg)
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR #*# (
   leftarg = SETOF int8,
   procedure = numeric_fac
);
ERROR:  42P13: SETOF type not allowed for operator argument
ROLLBACK;
ROLLBACK
-- Should fail. SETOF type functions not allowed as argument (testing rightarg)
BEGIN TRANSACTION;
BEGIN
CREATE OPERATOR #*# (
   rightarg = SETOF int8,
   procedure = numeric_fac
);
ERROR:  42P13: SETOF type not allowed for operator argument
ROLLBACK;
ROLLBACK
-- Should work. Sample text-book case
BEGIN TRANSACTION;
BEGIN
CREATE OR REPLACE FUNCTION fn_op2(boolean, boolean)
RETURNS boolean AS $$
    SELECT NULL::BOOLEAN;
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
CREATE OPERATOR === (
    LEFTARG = boolean,
    RIGHTARG = boolean,
    PROCEDURE = fn_op2,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = contsel,
    JOIN = contjoinsel,
    SORT1, SORT2, LTCMP, GTCMP, HASHES, MERGES
);
CREATE OPERATOR
ROLLBACK;
ROLLBACK
-- Should fail. Invalid attribute
CREATE OPERATOR #@%# (
   leftarg = int8,		-- right unary
   procedure = numeric_fac,
   invalid_att = int8
);
WARNING:  42601: operator attribute "invalid_att" not recognized
CREATE OPERATOR
-- Should fail. At least leftarg or rightarg should be mandatorily specified
CREATE OPERATOR #@%# (
   procedure = numeric_fac
);
ERROR:  42P13: at least one of leftarg or rightarg must be specified
-- Should fail. Procedure should be mandatorily specified
CREATE OPERATOR #@%# (
   leftarg = int8
);
ERROR:  42P13: operator procedure must be specified
-- Should fail. CREATE OPERATOR requires USAGE on TYPE
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_rol_op3;
CREATE ROLE
CREATE TYPE type_op3 AS ENUM ('new', 'open', 'closed');
CREATE TYPE
CREATE FUNCTION fn_op3(type_op3, int8)
RETURNS int8 AS $$
    SELECT NULL::int8;
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
REVOKE USAGE ON TYPE type_op3 FROM regress_rol_op3;
REVOKE
REVOKE USAGE ON TYPE type_op3 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
REVOKE
SET ROLE regress_rol_op3;
SET
CREATE OPERATOR #*# (
   leftarg = type_op3,
   rightarg = int8,
   procedure = fn_op3
);
ERROR:  42501: permission denied for type type_op3
ROLLBACK;
ROLLBACK
-- Should fail. CREATE OPERATOR requires USAGE on TYPE (need to check separately for rightarg)
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_rol_op4;
CREATE ROLE
CREATE TYPE type_op4 AS ENUM ('new', 'open', 'closed');
CREATE TYPE
CREATE FUNCTION fn_op4(int8, type_op4)
RETURNS int8 AS $$
    SELECT NULL::int8;
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
REVOKE USAGE ON TYPE type_op4 FROM regress_rol_op4;
REVOKE
REVOKE USAGE ON TYPE type_op4 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
REVOKE
SET ROLE regress_rol_op4;
SET
CREATE OPERATOR #*# (
   leftarg = int8,
   rightarg = type_op4,
   procedure = fn_op4
);
ERROR:  42501: permission denied for type type_op4
ROLLBACK;
ROLLBACK
-- Should fail. CREATE OPERATOR requires EXECUTE on function
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_rol_op5;
CREATE ROLE
CREATE TYPE type_op5 AS ENUM ('new', 'open', 'closed');
CREATE TYPE
CREATE FUNCTION fn_op5(int8, int8)
RETURNS int8 AS $$
    SELECT NULL::int8;
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM regress_rol_op5;
REVOKE
REVOKE EXECUTE ON FUNCTION fn_op5(int8, int8) FROM PUBLIC;-- Need to do this so that regress_rol_op3 is not allowed EXECUTE via PUBLIC
REVOKE
SET ROLE regress_rol_op5;
SET
CREATE OPERATOR #*# (
   leftarg = int8,
   rightarg = int8,
   procedure = fn_op5
);
ERROR:  42501: permission denied for function fn_op5
ROLLBACK;
ROLLBACK
-- Should fail. CREATE OPERATOR requires USAGE on return TYPE
BEGIN TRANSACTION;
BEGIN
CREATE ROLE regress_rol_op6;
CREATE ROLE
CREATE TYPE type_op6 AS ENUM ('new', 'open', 'closed');
CREATE TYPE
CREATE FUNCTION fn_op6(int8, int8)
RETURNS type_op6 AS $$
    SELECT NULL::type_op6;
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
REVOKE USAGE ON TYPE type_op6 FROM regress_rol_op6;
REVOKE
REVOKE USAGE ON TYPE type_op6 FROM PUBLIC;  -- Need to do this so that regress_rol_op3 is not allowed USAGE via PUBLIC
REVOKE
SET ROLE regress_rol_op6;
SET
CREATE OPERATOR #*# (
   leftarg = int8,
   rightarg = int8,
   procedure = fn_op6
);
ERROR:  42501: permission denied for type type_op6
ROLLBACK;
ROLLBACK
