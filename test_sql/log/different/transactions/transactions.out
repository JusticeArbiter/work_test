--
-- TRANSACTIONS
--
BEGIN;
BEGIN
SELECT *
   INTO TABLE xacttest
   FROM aggtest;
SELECT 0
INSERT INTO xacttest (a, b) VALUES (777, 777.777);
INSERT 0 1
END;
COMMIT
-- should retrieve one value--
SELECT a FROM xacttest WHERE a > 100;
  a  
-----
 777
(1 row)

BEGIN;
BEGIN
CREATE TABLE disappear (a int4);
CREATE TABLE
DELETE FROM aggtest;
DELETE 0
-- should be empty
SELECT * FROM aggtest;
 a | b 
---+---
(0 rows)

ABORT;
ROLLBACK
-- should not exist
SELECT oid FROM pg_class WHERE relname = 'disappear';
 oid 
-----
(0 rows)

-- should have members again
SELECT * FROM aggtest;
 a | b 
---+---
(0 rows)

-- Read-only tests
CREATE TABLE writetest (a int);
CREATE TABLE
CREATE TEMPORARY TABLE temptest (a int);
CREATE TABLE
BEGIN;
BEGIN
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE, READ ONLY, DEFERRABLE; -- ok
SET
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

SET TRANSACTION READ WRITE; --fail
ERROR:  25001: transaction read-write mode must be set before any query
COMMIT;
ROLLBACK
BEGIN;
BEGIN
SET TRANSACTION READ ONLY; -- ok
SET
SET TRANSACTION READ WRITE; -- ok
SET
SET TRANSACTION READ ONLY; -- ok
SET
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

SAVEPOINT x;
SAVEPOINT
SET TRANSACTION READ ONLY; -- ok
SET
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

SET TRANSACTION READ ONLY; -- ok
SET
SET TRANSACTION READ WRITE; --fail
ERROR:  25001: cannot set transaction read-write mode inside a read-only transaction
COMMIT;
ROLLBACK
BEGIN;
BEGIN
SET TRANSACTION READ WRITE; -- ok
SET
SAVEPOINT x;
SAVEPOINT
SET TRANSACTION READ WRITE; -- ok
SET
SET TRANSACTION READ ONLY; -- ok
SET
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

SET TRANSACTION READ ONLY; -- ok
SET
SET TRANSACTION READ WRITE; --fail
ERROR:  25001: cannot set transaction read-write mode inside a read-only transaction
COMMIT;
ROLLBACK
BEGIN;
BEGIN
SET TRANSACTION READ WRITE; -- ok
SET
SAVEPOINT x;
SAVEPOINT
SET TRANSACTION READ ONLY; -- ok
SET
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

ROLLBACK TO SAVEPOINT x;
ROLLBACK
SHOW transaction_read_only;  -- off
 transaction_read_only 
-----------------------
 off
(1 row)

SAVEPOINT y;
SAVEPOINT
SET TRANSACTION READ ONLY; -- ok
SET
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

RELEASE SAVEPOINT y;
RELEASE
SHOW transaction_read_only;  -- off
 transaction_read_only 
-----------------------
 off
(1 row)

COMMIT;
COMMIT
SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY;
SET
DROP TABLE writetest; -- fail
ERROR:  25006: cannot execute DROP TABLE in a read-only transaction
INSERT INTO writetest VALUES (1); -- fail
ERROR:  25006: cannot execute INSERT in a read-only transaction
SELECT * FROM writetest; -- ok
 a 
---
(0 rows)

DELETE FROM temptest; -- ok
DELETE 0
UPDATE temptest SET a = 0 FROM writetest WHERE temptest.a = 1 AND writetest.a = temptest.a; -- ok
UPDATE 0
PREPARE test AS UPDATE writetest SET a = 0; -- ok
PREPARE
EXECUTE test; -- fail
ERROR:  25006: cannot execute UPDATE in a read-only transaction
SELECT * FROM writetest, temptest; -- ok
 a | a 
---+---
(0 rows)

CREATE TABLE test AS SELECT * FROM writetest; -- fail
ERROR:  25006: cannot execute CREATE TABLE AS in a read-only transaction
START TRANSACTION READ WRITE;
START TRANSACTION
DROP TABLE writetest; -- ok
DROP TABLE
COMMIT;
COMMIT
-- Subtransactions, basic tests
-- create & drop tables
SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE;
SET
CREATE TABLE foobar (a int);
CREATE TABLE
BEGIN;
BEGIN
	CREATE TABLE foo (a int);
CREATE TABLE
	SAVEPOINT one;
SAVEPOINT
		DROP TABLE foo;
DROP TABLE
		CREATE TABLE bar (a int);
CREATE TABLE
	ROLLBACK TO SAVEPOINT one;
ROLLBACK
	RELEASE SAVEPOINT one;
RELEASE
	SAVEPOINT two;
SAVEPOINT
		CREATE TABLE baz (a int);
CREATE TABLE
	RELEASE SAVEPOINT two;
RELEASE
	drop TABLE foobar;
DROP TABLE
	CREATE TABLE barbaz (a int);
CREATE TABLE
COMMIT;
COMMIT
-- should exist: barbaz, baz, foo
SELECT * FROM foo;		-- should be empty
 a 
---
(0 rows)

SELECT * FROM bar;		-- shouldn't exist
ERROR:  42P01: relation "bar" does not exist
LINE 1: SELECT * FROM bar;
                      ^
SELECT * FROM barbaz;	-- should be empty
 a 
---
(0 rows)

SELECT * FROM baz;		-- should be empty
 a 
---
(0 rows)

-- inserts
BEGIN;
BEGIN
	INSERT INTO foo VALUES (1);
INSERT 0 1
	SAVEPOINT one;
SAVEPOINT
		INSERT into bar VALUES (1);
ERROR:  42P01: relation "bar" does not exist
LINE 1: INSERT into bar VALUES (1);
                    ^
	ROLLBACK TO one;
ROLLBACK
	RELEASE SAVEPOINT one;
RELEASE
	SAVEPOINT two;
SAVEPOINT
		INSERT into barbaz VALUES (1);
INSERT 0 1
	RELEASE two;
RELEASE
	SAVEPOINT three;
SAVEPOINT
		SAVEPOINT four;
SAVEPOINT
			INSERT INTO foo VALUES (2);
INSERT 0 1
		RELEASE SAVEPOINT four;
RELEASE
	ROLLBACK TO SAVEPOINT three;
ROLLBACK
	RELEASE SAVEPOINT three;
RELEASE
	INSERT INTO foo VALUES (3);
INSERT 0 1
COMMIT;
COMMIT
SELECT * FROM foo;		-- should have 1 and 3
 a 
---
 1
 3
(2 rows)

SELECT * FROM barbaz;	-- should have 1
 a 
---
 1
(1 row)

-- test whole-tree commit
BEGIN;
BEGIN
	SAVEPOINT one;
SAVEPOINT
		SELECT foo;
ERROR:  42703: column "foo" does not exist
LINE 1: SELECT foo;
               ^
	ROLLBACK TO SAVEPOINT one;
ROLLBACK
	RELEASE SAVEPOINT one;
RELEASE
	SAVEPOINT two;
SAVEPOINT
		CREATE TABLE savepoints (a int);
CREATE TABLE
		SAVEPOINT three;
SAVEPOINT
			INSERT INTO savepoints VALUES (1);
INSERT 0 1
			SAVEPOINT four;
SAVEPOINT
				INSERT INTO savepoints VALUES (2);
INSERT 0 1
				SAVEPOINT five;
SAVEPOINT
					INSERT INTO savepoints VALUES (3);
INSERT 0 1
				ROLLBACK TO SAVEPOINT five;
ROLLBACK
COMMIT;
COMMIT
COMMIT;		-- should not be in a transaction block
WARNING:  25P01: there is no transaction in progress
COMMIT
SELECT * FROM savepoints;
 a 
---
 1
 2
(2 rows)

-- test whole-tree rollback
BEGIN;
BEGIN
	SAVEPOINT one;
SAVEPOINT
		DELETE FROM savepoints WHERE a=1;
DELETE 1
	RELEASE SAVEPOINT one;
RELEASE
	SAVEPOINT two;
SAVEPOINT
		DELETE FROM savepoints WHERE a=1;
DELETE 0
		SAVEPOINT three;
SAVEPOINT
			DELETE FROM savepoints WHERE a=2;
DELETE 1
ROLLBACK;
ROLLBACK
COMMIT;		-- should not be in a transaction block
WARNING:  25P01: there is no transaction in progress
COMMIT
SELECT * FROM savepoints;
 a 
---
 1
 2
(2 rows)

-- test whole-tree commit on an aborted subtransaction
BEGIN;
BEGIN
	INSERT INTO savepoints VALUES (4);
INSERT 0 1
	SAVEPOINT one;
SAVEPOINT
		INSERT INTO savepoints VALUES (5);
INSERT 0 1
		SELECT foo;
ERROR:  42703: column "foo" does not exist
LINE 1: SELECT foo;
               ^
COMMIT;
ROLLBACK
SELECT * FROM savepoints;
 a 
---
 1
 2
(2 rows)

BEGIN;
BEGIN
	INSERT INTO savepoints VALUES (6);
INSERT 0 1
	SAVEPOINT one;
SAVEPOINT
		INSERT INTO savepoints VALUES (7);
INSERT 0 1
	RELEASE SAVEPOINT one;
RELEASE
	INSERT INTO savepoints VALUES (8);
INSERT 0 1
COMMIT;
COMMIT
-- rows 6 and 8 should have been created by the same xact
SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=8;
 ?column? 
----------
 t
(1 row)

-- rows 6 and 7 should have been created by different xacts
SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=6 AND b.a=7;
 ?column? 
----------
 f
(1 row)

BEGIN;
BEGIN
	INSERT INTO savepoints VALUES (9);
INSERT 0 1
	SAVEPOINT one;
SAVEPOINT
		INSERT INTO savepoints VALUES (10);
INSERT 0 1
	ROLLBACK TO SAVEPOINT one;
ROLLBACK
		INSERT INTO savepoints VALUES (11);
INSERT 0 1
COMMIT;
COMMIT
SELECT a FROM savepoints WHERE a in (9, 10, 11);
 a  
----
  9
 11
(2 rows)

-- rows 9 and 11 should have been created by different xacts
SELECT a.xmin = b.xmin FROM savepoints a, savepoints b WHERE a.a=9 AND b.a=11;
 ?column? 
----------
 f
(1 row)

BEGIN;
BEGIN
	INSERT INTO savepoints VALUES (12);
INSERT 0 1
	SAVEPOINT one;
SAVEPOINT
		INSERT INTO savepoints VALUES (13);
INSERT 0 1
		SAVEPOINT two;
SAVEPOINT
			INSERT INTO savepoints VALUES (14);
INSERT 0 1
	ROLLBACK TO SAVEPOINT one;
ROLLBACK
		INSERT INTO savepoints VALUES (15);
INSERT 0 1
		SAVEPOINT two;
SAVEPOINT
			INSERT INTO savepoints VALUES (16);
INSERT 0 1
			SAVEPOINT three;
SAVEPOINT
				INSERT INTO savepoints VALUES (17);
INSERT 0 1
COMMIT;
COMMIT
SELECT a FROM savepoints WHERE a BETWEEN 12 AND 17;
 a  
----
 12
 15
 16
 17
(4 rows)

BEGIN;
BEGIN
	INSERT INTO savepoints VALUES (18);
INSERT 0 1
	SAVEPOINT one;
SAVEPOINT
		INSERT INTO savepoints VALUES (19);
INSERT 0 1
		SAVEPOINT two;
SAVEPOINT
			INSERT INTO savepoints VALUES (20);
INSERT 0 1
	ROLLBACK TO SAVEPOINT one;
ROLLBACK
		INSERT INTO savepoints VALUES (21);
INSERT 0 1
	ROLLBACK TO SAVEPOINT one;
ROLLBACK
		INSERT INTO savepoints VALUES (22);
INSERT 0 1
COMMIT;
COMMIT
SELECT a FROM savepoints WHERE a BETWEEN 18 AND 22;
 a  
----
 18
 22
(2 rows)

DROP TABLE savepoints;
DROP TABLE
-- only in a transaction block:
SAVEPOINT one;
ERROR:  25P01: SAVEPOINT can only be used in transaction blocks
ROLLBACK TO SAVEPOINT one;
ERROR:  25P01: ROLLBACK TO SAVEPOINT can only be used in transaction blocks
RELEASE SAVEPOINT one;
ERROR:  25P01: RELEASE SAVEPOINT can only be used in transaction blocks
-- Only "rollback to" allowed in aborted state
BEGIN;
BEGIN
  SAVEPOINT one;
SAVEPOINT
  SELECT 0/0;
ERROR:  22012: division by zero
  SAVEPOINT two;    -- ignored till the end of ...
ERROR:  25P02: current transaction is aborted, commands ignored until end of transaction block
  RELEASE SAVEPOINT one;      -- ignored till the end of ...
ERROR:  25P02: current transaction is aborted, commands ignored until end of transaction block
  ROLLBACK TO SAVEPOINT one;
ROLLBACK
  SELECT 1;
 ?column? 
----------
        1
(1 row)

COMMIT;
COMMIT
SELECT 1;			-- this should work
 ?column? 
----------
        1
(1 row)

-- check non-transactional behavior of cursors
BEGIN;
BEGIN
	DECLARE c CURSOR FOR SELECT unique2 FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
	SAVEPOINT one;
SAVEPOINT
		FETCH 10 FROM c;
 unique2 
---------
(0 rows)

	ROLLBACK TO SAVEPOINT one;
ROLLBACK
		FETCH 10 FROM c;
 unique2 
---------
(0 rows)

	RELEASE SAVEPOINT one;
RELEASE
	FETCH 10 FROM c;
 unique2 
---------
(0 rows)

	CLOSE c;
CLOSE CURSOR
	DECLARE c CURSOR FOR SELECT unique2/0 FROM tenk1 ORDER BY unique2;
DECLARE CURSOR
	SAVEPOINT two;
SAVEPOINT
		FETCH 10 FROM c;
 ?column? 
----------
(0 rows)

	ROLLBACK TO SAVEPOINT two;
ROLLBACK
	-- c is now dead to the world ...
		FETCH 10 FROM c;
 ?column? 
----------
(0 rows)

	ROLLBACK TO SAVEPOINT two;
ROLLBACK
	RELEASE SAVEPOINT two;
RELEASE
	FETCH 10 FROM c;
 ?column? 
----------
(0 rows)

COMMIT;
COMMIT
--
-- Check that "stable" functions are really stable.  They should not be
-- able to see the partial results of the calling query.  (Ideally we would
-- also check that they don't see commits of concurrent transactions, but
-- that's a mite hard to do within the limitations of pg_regress.)
--
select * from xacttest;
  a  |    b    
-----+---------
 777 | 777.777
(1 row)

create or replace function max_xacttest() returns smallint language sql as
'select max(a) from xacttest' stable;
CREATE FUNCTION
begin;
BEGIN
update xacttest set a = max_xacttest() + 10 where a > 0;
UPDATE 1
select * from xacttest;
  a  |    b    
-----+---------
 787 | 777.777
(1 row)

rollback;
ROLLBACK
-- But a volatile function can see the partial results of the calling query
create or replace function max_xacttest() returns smallint language sql as
'select max(a) from xacttest' volatile;
CREATE FUNCTION
begin;
BEGIN
update xacttest set a = max_xacttest() + 10 where a > 0;
UPDATE 1
select * from xacttest;
  a  |    b    
-----+---------
 787 | 777.777
(1 row)

rollback;
ROLLBACK
-- Now the same test with plpgsql (since it depends on SPI which is different)
create or replace function max_xacttest() returns smallint language plpgsql as
'begin return max(a) from xacttest; end' stable;
CREATE FUNCTION
begin;
BEGIN
update xacttest set a = max_xacttest() + 10 where a > 0;
UPDATE 1
select * from xacttest;
  a  |    b    
-----+---------
 787 | 777.777
(1 row)

rollback;
ROLLBACK
create or replace function max_xacttest() returns smallint language plpgsql as
'begin return max(a) from xacttest; end' volatile;
CREATE FUNCTION
begin;
BEGIN
update xacttest set a = max_xacttest() + 10 where a > 0;
UPDATE 1
select * from xacttest;
  a  |    b    
-----+---------
 787 | 777.777
(1 row)

rollback;
ROLLBACK
-- test case for problems with dropping an open relation during abort
BEGIN;
BEGIN
	savepoint x;
SAVEPOINT
		CREATE TABLE koju (a INT UNIQUE);
CREATE TABLE
		INSERT INTO koju VALUES (1);
INSERT 0 1
		INSERT INTO koju VALUES (1);
ERROR:  23505: duplicate key value violates unique constraint "koju_a_key"
DETAIL:  Key (a)=(1) already exists.
	rollback to x;
ROLLBACK
	CREATE TABLE koju (a INT UNIQUE);
CREATE TABLE
	INSERT INTO koju VALUES (1);
INSERT 0 1
	INSERT INTO koju VALUES (1);
ERROR:  23505: duplicate key value violates unique constraint "koju_a_key"
DETAIL:  Key (a)=(1) already exists.
ROLLBACK;
ROLLBACK
DROP TABLE foo;
DROP TABLE
DROP TABLE baz;
DROP TABLE
DROP TABLE barbaz;
DROP TABLE
-- test case for problems with revalidating an open relation during abort
create function inverse(int) returns float8 as
$$
begin
  analyze revalidate_bug;
  return 1::float8/$1;
exception
  when division_by_zero then return 0;
end$$ language plpgsql volatile;
CREATE FUNCTION
create table revalidate_bug (c float8 unique);
CREATE TABLE
insert into revalidate_bug values (1);
INSERT 0 1
insert into revalidate_bug values (inverse(0));
INSERT 0 1
drop table revalidate_bug;
DROP TABLE
drop function inverse(int);
DROP FUNCTION
-- verify that cursors created during an aborted subtransaction are
-- closed, but that we do not rollback the effect of any FETCHs
-- performed in the aborted subtransaction
begin;
BEGIN
savepoint x;
SAVEPOINT
create table abc (a int);
CREATE TABLE
insert into abc values (5);
INSERT 0 1
insert into abc values (10);
INSERT 0 1
declare foo cursor for select * from abc;
DECLARE CURSOR
fetch from foo;
 a 
---
 5
(1 row)

rollback to x;
ROLLBACK
-- should fail
fetch from foo;
ERROR:  34000: cursor "foo" does not exist
commit;
ROLLBACK
begin;
BEGIN
create table abc (a int);
CREATE TABLE
insert into abc values (5);
INSERT 0 1
insert into abc values (10);
INSERT 0 1
insert into abc values (15);
INSERT 0 1
declare foo cursor for select * from abc;
DECLARE CURSOR
fetch from foo;
 a 
---
 5
(1 row)

savepoint x;
SAVEPOINT
fetch from foo;
 a  
----
 10
(1 row)

rollback to x;
ROLLBACK
fetch from foo;
 a  
----
 15
(1 row)

abort;
ROLLBACK
-- Test for proper cleanup after a failure in a cursor portal
-- that was created in an outer subtransaction
CREATE FUNCTION invert(x float8) RETURNS float8 LANGUAGE plpgsql AS
$$ begin return 1/x; end $$;
CREATE FUNCTION
CREATE FUNCTION create_temp_tab() RETURNS text
LANGUAGE plpgsql AS $$
BEGIN
  CREATE TEMP TABLE new_table (f1 float8);
  -- case of interest is that we fail while holding an open
  -- relcache reference to new_table
  INSERT INTO new_table SELECT invert(0.0);
  RETURN 'foo';
END $$;
CREATE FUNCTION
BEGIN;
BEGIN
DECLARE ok CURSOR FOR SELECT * FROM int8_tbl;
DECLARE CURSOR
DECLARE ctt CURSOR FOR SELECT create_temp_tab();
DECLARE CURSOR
FETCH ok;
 q1  | q2  
-----+-----
 123 | 456
(1 row)

SAVEPOINT s1;
SAVEPOINT
FETCH ok;  -- should work
 q1  |        q2        
-----+------------------
 123 | 4567890123456789
(1 row)

FETCH ctt; -- error occurs here
ERROR:  22012: division by zero
CONTEXT:  PL/pgSQL function invert(double precision) line 1 at RETURN
SQL statement "INSERT INTO new_table SELECT invert(0.0)"
PL/pgSQL function create_temp_tab() line 6 at SQL statement
ROLLBACK TO s1;
ROLLBACK
FETCH ok;  -- should work
        q1        | q2  
------------------+-----
 4567890123456789 | 123
(1 row)

FETCH ctt; -- must be rejected
ERROR:  55000: portal "ctt" cannot be run
COMMIT;
ROLLBACK
DROP FUNCTION create_temp_tab();
DROP FUNCTION
DROP FUNCTION invert(x float8);
DROP FUNCTION
-- Test for successful cleanup of an aborted transaction at session exit.
-- THIS MUST BE THE LAST TEST IN THIS FILE.
begin;
BEGIN
select 1/0;
ERROR:  22012: division by zero
rollback to X;
ERROR:  3B001: no such savepoint
-- DO NOT ADD ANYTHING HERE.
